// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ShiftType is an object representing the database table.
type ShiftType struct {
	ID             string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID string            `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	Name           string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	Roles          types.StringArray `boil:"roles" json:"roles" toml:"roles" yaml:"roles"`

	R *shiftTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shiftTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShiftTypeColumns = struct {
	ID             string
	OrganizationID string
	Name           string
	Roles          string
}{
	ID:             "id",
	OrganizationID: "organization_id",
	Name:           "name",
	Roles:          "roles",
}

var ShiftTypeTableColumns = struct {
	ID             string
	OrganizationID string
	Name           string
	Roles          string
}{
	ID:             "shift_types.id",
	OrganizationID: "shift_types.organization_id",
	Name:           "shift_types.name",
	Roles:          "shift_types.roles",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ShiftTypeWhere = struct {
	ID             whereHelperstring
	OrganizationID whereHelperstring
	Name           whereHelperstring
	Roles          whereHelpertypes_StringArray
}{
	ID:             whereHelperstring{field: "\"shift_types\".\"id\""},
	OrganizationID: whereHelperstring{field: "\"shift_types\".\"organization_id\""},
	Name:           whereHelperstring{field: "\"shift_types\".\"name\""},
	Roles:          whereHelpertypes_StringArray{field: "\"shift_types\".\"roles\""},
}

// ShiftTypeRels is where relationship names are stored.
var ShiftTypeRels = struct {
	Organization string
	Shifts       string
}{
	Organization: "Organization",
	Shifts:       "Shifts",
}

// shiftTypeR is where relationships are stored.
type shiftTypeR struct {
	Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	Shifts       ShiftSlice    `boil:"Shifts" json:"Shifts" toml:"Shifts" yaml:"Shifts"`
}

// NewStruct creates a new relationship struct
func (*shiftTypeR) NewStruct() *shiftTypeR {
	return &shiftTypeR{}
}

func (r *shiftTypeR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *shiftTypeR) GetShifts() ShiftSlice {
	if r == nil {
		return nil
	}
	return r.Shifts
}

// shiftTypeL is where Load methods for each relationship are stored.
type shiftTypeL struct{}

var (
	shiftTypeAllColumns            = []string{"id", "organization_id", "name", "roles"}
	shiftTypeColumnsWithoutDefault = []string{"organization_id", "name", "roles"}
	shiftTypeColumnsWithDefault    = []string{"id"}
	shiftTypePrimaryKeyColumns     = []string{"id"}
	shiftTypeGeneratedColumns      = []string{}
)

type (
	// ShiftTypeSlice is an alias for a slice of pointers to ShiftType.
	// This should almost always be used instead of []ShiftType.
	ShiftTypeSlice []*ShiftType
	// ShiftTypeHook is the signature for custom ShiftType hook methods
	ShiftTypeHook func(context.Context, boil.ContextExecutor, *ShiftType) error

	shiftTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shiftTypeType                 = reflect.TypeOf(&ShiftType{})
	shiftTypeMapping              = queries.MakeStructMapping(shiftTypeType)
	shiftTypePrimaryKeyMapping, _ = queries.BindMapping(shiftTypeType, shiftTypeMapping, shiftTypePrimaryKeyColumns)
	shiftTypeInsertCacheMut       sync.RWMutex
	shiftTypeInsertCache          = make(map[string]insertCache)
	shiftTypeUpdateCacheMut       sync.RWMutex
	shiftTypeUpdateCache          = make(map[string]updateCache)
	shiftTypeUpsertCacheMut       sync.RWMutex
	shiftTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shiftTypeAfterSelectHooks []ShiftTypeHook

var shiftTypeBeforeInsertHooks []ShiftTypeHook
var shiftTypeAfterInsertHooks []ShiftTypeHook

var shiftTypeBeforeUpdateHooks []ShiftTypeHook
var shiftTypeAfterUpdateHooks []ShiftTypeHook

var shiftTypeBeforeDeleteHooks []ShiftTypeHook
var shiftTypeAfterDeleteHooks []ShiftTypeHook

var shiftTypeBeforeUpsertHooks []ShiftTypeHook
var shiftTypeAfterUpsertHooks []ShiftTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShiftType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShiftType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShiftType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShiftType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShiftType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShiftType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShiftType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShiftType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShiftType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShiftTypeHook registers your hook function for all future operations.
func AddShiftTypeHook(hookPoint boil.HookPoint, shiftTypeHook ShiftTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shiftTypeAfterSelectHooks = append(shiftTypeAfterSelectHooks, shiftTypeHook)
	case boil.BeforeInsertHook:
		shiftTypeBeforeInsertHooks = append(shiftTypeBeforeInsertHooks, shiftTypeHook)
	case boil.AfterInsertHook:
		shiftTypeAfterInsertHooks = append(shiftTypeAfterInsertHooks, shiftTypeHook)
	case boil.BeforeUpdateHook:
		shiftTypeBeforeUpdateHooks = append(shiftTypeBeforeUpdateHooks, shiftTypeHook)
	case boil.AfterUpdateHook:
		shiftTypeAfterUpdateHooks = append(shiftTypeAfterUpdateHooks, shiftTypeHook)
	case boil.BeforeDeleteHook:
		shiftTypeBeforeDeleteHooks = append(shiftTypeBeforeDeleteHooks, shiftTypeHook)
	case boil.AfterDeleteHook:
		shiftTypeAfterDeleteHooks = append(shiftTypeAfterDeleteHooks, shiftTypeHook)
	case boil.BeforeUpsertHook:
		shiftTypeBeforeUpsertHooks = append(shiftTypeBeforeUpsertHooks, shiftTypeHook)
	case boil.AfterUpsertHook:
		shiftTypeAfterUpsertHooks = append(shiftTypeAfterUpsertHooks, shiftTypeHook)
	}
}

// OneP returns a single shiftType record from the query, and panics on error.
func (q shiftTypeQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *ShiftType {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single shiftType record from the query.
func (q shiftTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShiftType, error) {
	o := &ShiftType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shift_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all ShiftType records from the query, and panics on error.
func (q shiftTypeQuery) AllP(ctx context.Context, exec boil.ContextExecutor) ShiftTypeSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ShiftType records from the query.
func (q shiftTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShiftTypeSlice, error) {
	var o []*ShiftType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShiftType slice")
	}

	if len(shiftTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all ShiftType records in the query, and panics on error.
func (q shiftTypeQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ShiftType records in the query.
func (q shiftTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shift_types rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q shiftTypeQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q shiftTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shift_types exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *ShiftType) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// Shifts retrieves all the shift's Shifts with an executor.
func (o *ShiftType) Shifts(mods ...qm.QueryMod) shiftQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shifts\".\"shift_type_id\"=?", o.ID),
	)

	return Shifts(queryMods...)
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftTypeL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftType interface{}, mods queries.Applicator) error {
	var slice []*ShiftType
	var object *ShiftType

	if singular {
		var ok bool
		object, ok = maybeShiftType.(*ShiftType)
		if !ok {
			object = new(ShiftType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftType))
			}
		}
	} else {
		s, ok := maybeShiftType.(*[]*ShiftType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftTypeR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftTypeR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.ShiftTypes = append(foreign.R.ShiftTypes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.ShiftTypes = append(foreign.R.ShiftTypes, local)
				break
			}
		}
	}

	return nil
}

// LoadShifts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shiftTypeL) LoadShifts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftType interface{}, mods queries.Applicator) error {
	var slice []*ShiftType
	var object *ShiftType

	if singular {
		var ok bool
		object, ok = maybeShiftType.(*ShiftType)
		if !ok {
			object = new(ShiftType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftType))
			}
		}
	} else {
		s, ok := maybeShiftType.(*[]*ShiftType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shifts`),
		qm.WhereIn(`shifts.shift_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shifts")
	}

	var resultSlice []*Shift
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shifts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shifts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shifts")
	}

	if len(shiftAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Shifts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shiftR{}
			}
			foreign.R.ShiftType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShiftTypeID {
				local.R.Shifts = append(local.R.Shifts, foreign)
				if foreign.R == nil {
					foreign.R = &shiftR{}
				}
				foreign.R.ShiftType = local
				break
			}
		}
	}

	return nil
}

// SetOrganizationP of the shiftType to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.ShiftTypes.
// Panics on error.
func (o *ShiftType) SetOrganizationP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) {
	if err := o.SetOrganization(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrganization of the shiftType to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.ShiftTypes.
func (o *ShiftType) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shift_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftTypePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &shiftTypeR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			ShiftTypes: ShiftTypeSlice{o},
		}
	} else {
		related.R.ShiftTypes = append(related.R.ShiftTypes, o)
	}

	return nil
}

// AddShiftsP adds the given related objects to the existing relationships
// of the shift_type, optionally inserting them as new records.
// Appends related to o.R.Shifts.
// Sets related.R.ShiftType appropriately.
// Panics on error.
func (o *ShiftType) AddShiftsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shift) {
	if err := o.AddShifts(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddShifts adds the given related objects to the existing relationships
// of the shift_type, optionally inserting them as new records.
// Appends related to o.R.Shifts.
// Sets related.R.ShiftType appropriately.
func (o *ShiftType) AddShifts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shift) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShiftTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shifts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shift_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, shiftPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShiftTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shiftTypeR{
			Shifts: related,
		}
	} else {
		o.R.Shifts = append(o.R.Shifts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shiftR{
				ShiftType: o,
			}
		} else {
			rel.R.ShiftType = o
		}
	}
	return nil
}

// ShiftTypes retrieves all the records using an executor.
func ShiftTypes(mods ...qm.QueryMod) shiftTypeQuery {
	mods = append(mods, qm.From("\"shift_types\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shift_types\".*"})
	}

	return shiftTypeQuery{q}
}

// FindShiftTypeP retrieves a single record by ID with an executor, and panics on error.
func FindShiftTypeP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *ShiftType {
	retobj, err := FindShiftType(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindShiftType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShiftType(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ShiftType, error) {
	shiftTypeObj := &ShiftType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shift_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shiftTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shift_types")
	}

	if err = shiftTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shiftTypeObj, err
	}

	return shiftTypeObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ShiftType) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShiftType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shift_types provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shiftTypeInsertCacheMut.RLock()
	cache, cached := shiftTypeInsertCache[key]
	shiftTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shiftTypeAllColumns,
			shiftTypeColumnsWithDefault,
			shiftTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shiftTypeType, shiftTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shiftTypeType, shiftTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shift_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shift_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shift_types")
	}

	if !cached {
		shiftTypeInsertCacheMut.Lock()
		shiftTypeInsertCache[key] = cache
		shiftTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateP uses an executor to update the ShiftType, and panics on error.
// See Update for more documentation.
func (o *ShiftType) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the ShiftType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShiftType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shiftTypeUpdateCacheMut.RLock()
	cache, cached := shiftTypeUpdateCache[key]
	shiftTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shiftTypeAllColumns,
			shiftTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shift_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shift_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shiftTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shiftTypeType, shiftTypeMapping, append(wl, shiftTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shift_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shift_types")
	}

	if !cached {
		shiftTypeUpdateCacheMut.Lock()
		shiftTypeUpdateCache[key] = cache
		shiftTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q shiftTypeQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q shiftTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shift_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shift_types")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ShiftTypeSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShiftTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shift_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shiftTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shiftType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shiftType")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ShiftType) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShiftType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shift_types provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shiftTypeUpsertCacheMut.RLock()
	cache, cached := shiftTypeUpsertCache[key]
	shiftTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shiftTypeAllColumns,
			shiftTypeColumnsWithDefault,
			shiftTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shiftTypeAllColumns,
			shiftTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shift_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shiftTypePrimaryKeyColumns))
			copy(conflict, shiftTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shift_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shiftTypeType, shiftTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shiftTypeType, shiftTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shift_types")
	}

	if !cached {
		shiftTypeUpsertCacheMut.Lock()
		shiftTypeUpsertCache[key] = cache
		shiftTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteP deletes a single ShiftType record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ShiftType) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single ShiftType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShiftType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShiftType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shiftTypePrimaryKeyMapping)
	sql := "DELETE FROM \"shift_types\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shift_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shift_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q shiftTypeQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q shiftTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shiftTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shift_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shift_types")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ShiftTypeSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShiftTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shiftTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shift_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shiftType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shift_types")
	}

	if len(shiftTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ShiftType) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShiftType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShiftType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ShiftTypeSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShiftTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShiftTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shift_types\".* FROM \"shift_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShiftTypeSlice")
	}

	*o = slice

	return nil
}

// ShiftTypeExistsP checks if the ShiftType row exists. Panics on error.
func ShiftTypeExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := ShiftTypeExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ShiftTypeExists checks if the ShiftType row exists.
func ShiftTypeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shift_types\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shift_types exists")
	}

	return exists, nil
}

// Exists checks if the ShiftType row exists.
func (o *ShiftType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShiftTypeExists(ctx, exec, o.ID)
}
