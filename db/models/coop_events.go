// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CoopEvent is an object representing the database table.
type CoopEvent struct {
	ID             string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID string     `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	SequenceID     int64      `boil:"sequence_id" json:"sequence_id" toml:"sequence_id" yaml:"sequence_id"`
	Type           string     `boil:"type" json:"type" toml:"type" yaml:"type"`
	ScopeType      string     `boil:"scope_type" json:"scope_type" toml:"scope_type" yaml:"scope_type"`
	ScopeID        string     `boil:"scope_id" json:"scope_id" toml:"scope_id" yaml:"scope_id"`
	HappenedAt     time.Time  `boil:"happened_at" json:"happened_at" toml:"happened_at" yaml:"happened_at"`
	InsertedAt     time.Time  `boil:"inserted_at" json:"inserted_at" toml:"inserted_at" yaml:"inserted_at"`
	Data           types.JSON `boil:"data" json:"data" toml:"data" yaml:"data"`

	R *coopEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L coopEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CoopEventColumns = struct {
	ID             string
	OrganizationID string
	SequenceID     string
	Type           string
	ScopeType      string
	ScopeID        string
	HappenedAt     string
	InsertedAt     string
	Data           string
}{
	ID:             "id",
	OrganizationID: "organization_id",
	SequenceID:     "sequence_id",
	Type:           "type",
	ScopeType:      "scope_type",
	ScopeID:        "scope_id",
	HappenedAt:     "happened_at",
	InsertedAt:     "inserted_at",
	Data:           "data",
}

var CoopEventTableColumns = struct {
	ID             string
	OrganizationID string
	SequenceID     string
	Type           string
	ScopeType      string
	ScopeID        string
	HappenedAt     string
	InsertedAt     string
	Data           string
}{
	ID:             "coop_events.id",
	OrganizationID: "coop_events.organization_id",
	SequenceID:     "coop_events.sequence_id",
	Type:           "coop_events.type",
	ScopeType:      "coop_events.scope_type",
	ScopeID:        "coop_events.scope_id",
	HappenedAt:     "coop_events.happened_at",
	InsertedAt:     "coop_events.inserted_at",
	Data:           "coop_events.data",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CoopEventWhere = struct {
	ID             whereHelperstring
	OrganizationID whereHelperstring
	SequenceID     whereHelperint64
	Type           whereHelperstring
	ScopeType      whereHelperstring
	ScopeID        whereHelperstring
	HappenedAt     whereHelpertime_Time
	InsertedAt     whereHelpertime_Time
	Data           whereHelpertypes_JSON
}{
	ID:             whereHelperstring{field: "\"coop_events\".\"id\""},
	OrganizationID: whereHelperstring{field: "\"coop_events\".\"organization_id\""},
	SequenceID:     whereHelperint64{field: "\"coop_events\".\"sequence_id\""},
	Type:           whereHelperstring{field: "\"coop_events\".\"type\""},
	ScopeType:      whereHelperstring{field: "\"coop_events\".\"scope_type\""},
	ScopeID:        whereHelperstring{field: "\"coop_events\".\"scope_id\""},
	HappenedAt:     whereHelpertime_Time{field: "\"coop_events\".\"happened_at\""},
	InsertedAt:     whereHelpertime_Time{field: "\"coop_events\".\"inserted_at\""},
	Data:           whereHelpertypes_JSON{field: "\"coop_events\".\"data\""},
}

// CoopEventRels is where relationship names are stored.
var CoopEventRels = struct {
	Organization              string
	CreatedByMemberships      string
	CreatedByShiftAssignments string
}{
	Organization:              "Organization",
	CreatedByMemberships:      "CreatedByMemberships",
	CreatedByShiftAssignments: "CreatedByShiftAssignments",
}

// coopEventR is where relationships are stored.
type coopEventR struct {
	Organization              *Organization        `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	CreatedByMemberships      MembershipSlice      `boil:"CreatedByMemberships" json:"CreatedByMemberships" toml:"CreatedByMemberships" yaml:"CreatedByMemberships"`
	CreatedByShiftAssignments ShiftAssignmentSlice `boil:"CreatedByShiftAssignments" json:"CreatedByShiftAssignments" toml:"CreatedByShiftAssignments" yaml:"CreatedByShiftAssignments"`
}

// NewStruct creates a new relationship struct
func (*coopEventR) NewStruct() *coopEventR {
	return &coopEventR{}
}

func (r *coopEventR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *coopEventR) GetCreatedByMemberships() MembershipSlice {
	if r == nil {
		return nil
	}
	return r.CreatedByMemberships
}

func (r *coopEventR) GetCreatedByShiftAssignments() ShiftAssignmentSlice {
	if r == nil {
		return nil
	}
	return r.CreatedByShiftAssignments
}

// coopEventL is where Load methods for each relationship are stored.
type coopEventL struct{}

var (
	coopEventAllColumns            = []string{"id", "organization_id", "sequence_id", "type", "scope_type", "scope_id", "happened_at", "inserted_at", "data"}
	coopEventColumnsWithoutDefault = []string{"organization_id", "type", "scope_type", "scope_id", "happened_at", "data"}
	coopEventColumnsWithDefault    = []string{"id", "sequence_id", "inserted_at"}
	coopEventPrimaryKeyColumns     = []string{"id"}
	coopEventGeneratedColumns      = []string{}
)

type (
	// CoopEventSlice is an alias for a slice of pointers to CoopEvent.
	// This should almost always be used instead of []CoopEvent.
	CoopEventSlice []*CoopEvent
	// CoopEventHook is the signature for custom CoopEvent hook methods
	CoopEventHook func(context.Context, boil.ContextExecutor, *CoopEvent) error

	coopEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	coopEventType                 = reflect.TypeOf(&CoopEvent{})
	coopEventMapping              = queries.MakeStructMapping(coopEventType)
	coopEventPrimaryKeyMapping, _ = queries.BindMapping(coopEventType, coopEventMapping, coopEventPrimaryKeyColumns)
	coopEventInsertCacheMut       sync.RWMutex
	coopEventInsertCache          = make(map[string]insertCache)
	coopEventUpdateCacheMut       sync.RWMutex
	coopEventUpdateCache          = make(map[string]updateCache)
	coopEventUpsertCacheMut       sync.RWMutex
	coopEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var coopEventAfterSelectHooks []CoopEventHook

var coopEventBeforeInsertHooks []CoopEventHook
var coopEventAfterInsertHooks []CoopEventHook

var coopEventBeforeUpdateHooks []CoopEventHook
var coopEventAfterUpdateHooks []CoopEventHook

var coopEventBeforeDeleteHooks []CoopEventHook
var coopEventAfterDeleteHooks []CoopEventHook

var coopEventBeforeUpsertHooks []CoopEventHook
var coopEventAfterUpsertHooks []CoopEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CoopEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coopEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CoopEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coopEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CoopEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coopEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CoopEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coopEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CoopEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coopEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CoopEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coopEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CoopEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coopEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CoopEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coopEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CoopEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coopEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCoopEventHook registers your hook function for all future operations.
func AddCoopEventHook(hookPoint boil.HookPoint, coopEventHook CoopEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		coopEventAfterSelectHooks = append(coopEventAfterSelectHooks, coopEventHook)
	case boil.BeforeInsertHook:
		coopEventBeforeInsertHooks = append(coopEventBeforeInsertHooks, coopEventHook)
	case boil.AfterInsertHook:
		coopEventAfterInsertHooks = append(coopEventAfterInsertHooks, coopEventHook)
	case boil.BeforeUpdateHook:
		coopEventBeforeUpdateHooks = append(coopEventBeforeUpdateHooks, coopEventHook)
	case boil.AfterUpdateHook:
		coopEventAfterUpdateHooks = append(coopEventAfterUpdateHooks, coopEventHook)
	case boil.BeforeDeleteHook:
		coopEventBeforeDeleteHooks = append(coopEventBeforeDeleteHooks, coopEventHook)
	case boil.AfterDeleteHook:
		coopEventAfterDeleteHooks = append(coopEventAfterDeleteHooks, coopEventHook)
	case boil.BeforeUpsertHook:
		coopEventBeforeUpsertHooks = append(coopEventBeforeUpsertHooks, coopEventHook)
	case boil.AfterUpsertHook:
		coopEventAfterUpsertHooks = append(coopEventAfterUpsertHooks, coopEventHook)
	}
}

// OneP returns a single coopEvent record from the query, and panics on error.
func (q coopEventQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *CoopEvent {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single coopEvent record from the query.
func (q coopEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CoopEvent, error) {
	o := &CoopEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for coop_events")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all CoopEvent records from the query, and panics on error.
func (q coopEventQuery) AllP(ctx context.Context, exec boil.ContextExecutor) CoopEventSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all CoopEvent records from the query.
func (q coopEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (CoopEventSlice, error) {
	var o []*CoopEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CoopEvent slice")
	}

	if len(coopEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all CoopEvent records in the query, and panics on error.
func (q coopEventQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all CoopEvent records in the query.
func (q coopEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count coop_events rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q coopEventQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q coopEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if coop_events exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *CoopEvent) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// CreatedByMemberships retrieves all the membership's Memberships with an executor via created_by column.
func (o *CoopEvent) CreatedByMemberships(mods ...qm.QueryMod) membershipQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"memberships\".\"created_by\"=?", o.ID),
	)

	return Memberships(queryMods...)
}

// CreatedByShiftAssignments retrieves all the shift_assignment's ShiftAssignments with an executor via created_by column.
func (o *CoopEvent) CreatedByShiftAssignments(mods ...qm.QueryMod) shiftAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shift_assignments\".\"created_by\"=?", o.ID),
	)

	return ShiftAssignments(queryMods...)
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (coopEventL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCoopEvent interface{}, mods queries.Applicator) error {
	var slice []*CoopEvent
	var object *CoopEvent

	if singular {
		var ok bool
		object, ok = maybeCoopEvent.(*CoopEvent)
		if !ok {
			object = new(CoopEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCoopEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCoopEvent))
			}
		}
	} else {
		s, ok := maybeCoopEvent.(*[]*CoopEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCoopEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCoopEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &coopEventR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &coopEventR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.CoopEvents = append(foreign.R.CoopEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.CoopEvents = append(foreign.R.CoopEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedByMemberships allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (coopEventL) LoadCreatedByMemberships(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCoopEvent interface{}, mods queries.Applicator) error {
	var slice []*CoopEvent
	var object *CoopEvent

	if singular {
		var ok bool
		object, ok = maybeCoopEvent.(*CoopEvent)
		if !ok {
			object = new(CoopEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCoopEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCoopEvent))
			}
		}
	} else {
		s, ok := maybeCoopEvent.(*[]*CoopEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCoopEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCoopEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &coopEventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &coopEventR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`memberships`),
		qm.WhereIn(`memberships.created_by in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load memberships")
	}

	var resultSlice []*Membership
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice memberships")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on memberships")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for memberships")
	}

	if len(membershipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByMemberships = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &membershipR{}
			}
			foreign.R.CreatedByCoopEvent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedBy {
				local.R.CreatedByMemberships = append(local.R.CreatedByMemberships, foreign)
				if foreign.R == nil {
					foreign.R = &membershipR{}
				}
				foreign.R.CreatedByCoopEvent = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByShiftAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (coopEventL) LoadCreatedByShiftAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCoopEvent interface{}, mods queries.Applicator) error {
	var slice []*CoopEvent
	var object *CoopEvent

	if singular {
		var ok bool
		object, ok = maybeCoopEvent.(*CoopEvent)
		if !ok {
			object = new(CoopEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCoopEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCoopEvent))
			}
		}
	} else {
		s, ok := maybeCoopEvent.(*[]*CoopEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCoopEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCoopEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &coopEventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &coopEventR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shift_assignments`),
		qm.WhereIn(`shift_assignments.created_by in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shift_assignments")
	}

	var resultSlice []*ShiftAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shift_assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shift_assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shift_assignments")
	}

	if len(shiftAssignmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByShiftAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shiftAssignmentR{}
			}
			foreign.R.CreatedByCoopEvent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedBy {
				local.R.CreatedByShiftAssignments = append(local.R.CreatedByShiftAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &shiftAssignmentR{}
				}
				foreign.R.CreatedByCoopEvent = local
				break
			}
		}
	}

	return nil
}

// SetOrganizationP of the coopEvent to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.CoopEvents.
// Panics on error.
func (o *CoopEvent) SetOrganizationP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) {
	if err := o.SetOrganization(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrganization of the coopEvent to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.CoopEvents.
func (o *CoopEvent) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"coop_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, coopEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &coopEventR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			CoopEvents: CoopEventSlice{o},
		}
	} else {
		related.R.CoopEvents = append(related.R.CoopEvents, o)
	}

	return nil
}

// AddCreatedByMembershipsP adds the given related objects to the existing relationships
// of the coop_event, optionally inserting them as new records.
// Appends related to o.R.CreatedByMemberships.
// Sets related.R.CreatedByCoopEvent appropriately.
// Panics on error.
func (o *CoopEvent) AddCreatedByMembershipsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Membership) {
	if err := o.AddCreatedByMemberships(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCreatedByMemberships adds the given related objects to the existing relationships
// of the coop_event, optionally inserting them as new records.
// Appends related to o.R.CreatedByMemberships.
// Sets related.R.CreatedByCoopEvent appropriately.
func (o *CoopEvent) AddCreatedByMemberships(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Membership) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedBy = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"memberships\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
				strmangle.WhereClause("\"", "\"", 2, membershipPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MemberID, rel.OrganizationID, rel.MembershipTypeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedBy = o.ID
		}
	}

	if o.R == nil {
		o.R = &coopEventR{
			CreatedByMemberships: related,
		}
	} else {
		o.R.CreatedByMemberships = append(o.R.CreatedByMemberships, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &membershipR{
				CreatedByCoopEvent: o,
			}
		} else {
			rel.R.CreatedByCoopEvent = o
		}
	}
	return nil
}

// AddCreatedByShiftAssignmentsP adds the given related objects to the existing relationships
// of the coop_event, optionally inserting them as new records.
// Appends related to o.R.CreatedByShiftAssignments.
// Sets related.R.CreatedByCoopEvent appropriately.
// Panics on error.
func (o *CoopEvent) AddCreatedByShiftAssignmentsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftAssignment) {
	if err := o.AddCreatedByShiftAssignments(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCreatedByShiftAssignments adds the given related objects to the existing relationships
// of the coop_event, optionally inserting them as new records.
// Appends related to o.R.CreatedByShiftAssignments.
// Sets related.R.CreatedByCoopEvent appropriately.
func (o *CoopEvent) AddCreatedByShiftAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedBy = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shift_assignments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
				strmangle.WhereClause("\"", "\"", 2, shiftAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MemberID, rel.ShiftID, rel.OrganizationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedBy = o.ID
		}
	}

	if o.R == nil {
		o.R = &coopEventR{
			CreatedByShiftAssignments: related,
		}
	} else {
		o.R.CreatedByShiftAssignments = append(o.R.CreatedByShiftAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shiftAssignmentR{
				CreatedByCoopEvent: o,
			}
		} else {
			rel.R.CreatedByCoopEvent = o
		}
	}
	return nil
}

// CoopEvents retrieves all the records using an executor.
func CoopEvents(mods ...qm.QueryMod) coopEventQuery {
	mods = append(mods, qm.From("\"coop_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"coop_events\".*"})
	}

	return coopEventQuery{q}
}

// FindCoopEventP retrieves a single record by ID with an executor, and panics on error.
func FindCoopEventP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *CoopEvent {
	retobj, err := FindCoopEvent(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCoopEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCoopEvent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CoopEvent, error) {
	coopEventObj := &CoopEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"coop_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, coopEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from coop_events")
	}

	if err = coopEventObj.doAfterSelectHooks(ctx, exec); err != nil {
		return coopEventObj, err
	}

	return coopEventObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *CoopEvent) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CoopEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no coop_events provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(coopEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	coopEventInsertCacheMut.RLock()
	cache, cached := coopEventInsertCache[key]
	coopEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			coopEventAllColumns,
			coopEventColumnsWithDefault,
			coopEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(coopEventType, coopEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(coopEventType, coopEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"coop_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"coop_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into coop_events")
	}

	if !cached {
		coopEventInsertCacheMut.Lock()
		coopEventInsertCache[key] = cache
		coopEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateP uses an executor to update the CoopEvent, and panics on error.
// See Update for more documentation.
func (o *CoopEvent) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the CoopEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CoopEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	coopEventUpdateCacheMut.RLock()
	cache, cached := coopEventUpdateCache[key]
	coopEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			coopEventAllColumns,
			coopEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update coop_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"coop_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, coopEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(coopEventType, coopEventMapping, append(wl, coopEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update coop_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for coop_events")
	}

	if !cached {
		coopEventUpdateCacheMut.Lock()
		coopEventUpdateCache[key] = cache
		coopEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q coopEventQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q coopEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for coop_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for coop_events")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CoopEventSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CoopEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coopEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"coop_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, coopEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in coopEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all coopEvent")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *CoopEvent) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CoopEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no coop_events provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(coopEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	coopEventUpsertCacheMut.RLock()
	cache, cached := coopEventUpsertCache[key]
	coopEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			coopEventAllColumns,
			coopEventColumnsWithDefault,
			coopEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			coopEventAllColumns,
			coopEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert coop_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(coopEventPrimaryKeyColumns))
			copy(conflict, coopEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"coop_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(coopEventType, coopEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(coopEventType, coopEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert coop_events")
	}

	if !cached {
		coopEventUpsertCacheMut.Lock()
		coopEventUpsertCache[key] = cache
		coopEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteP deletes a single CoopEvent record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CoopEvent) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single CoopEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CoopEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CoopEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), coopEventPrimaryKeyMapping)
	sql := "DELETE FROM \"coop_events\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from coop_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for coop_events")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q coopEventQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q coopEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no coopEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from coop_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for coop_events")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CoopEventSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CoopEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(coopEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coopEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"coop_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, coopEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from coopEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for coop_events")
	}

	if len(coopEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *CoopEvent) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CoopEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCoopEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CoopEventSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CoopEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CoopEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coopEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"coop_events\".* FROM \"coop_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, coopEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CoopEventSlice")
	}

	*o = slice

	return nil
}

// CoopEventExistsP checks if the CoopEvent row exists. Panics on error.
func CoopEventExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := CoopEventExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CoopEventExists checks if the CoopEvent row exists.
func CoopEventExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"coop_events\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if coop_events exists")
	}

	return exists, nil
}

// Exists checks if the CoopEvent row exists.
func (o *CoopEvent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CoopEventExists(ctx, exec, o.ID)
}
