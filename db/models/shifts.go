// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Shift is an object representing the database table.
type Shift struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID string      `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	StartAt        time.Time   `boil:"start_at" json:"start_at" toml:"start_at" yaml:"start_at"`
	EndAt          time.Time   `boil:"end_at" json:"end_at" toml:"end_at" yaml:"end_at"`
	Notes          string      `boil:"notes" json:"notes" toml:"notes" yaml:"notes"`
	ShiftTypeID    string      `boil:"shift_type_id" json:"shift_type_id" toml:"shift_type_id" yaml:"shift_type_id"`
	ShiftTermID    null.String `boil:"shift_term_id" json:"shift_term_id,omitempty" toml:"shift_term_id" yaml:"shift_term_id,omitempty"`

	R *shiftR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shiftL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShiftColumns = struct {
	ID             string
	OrganizationID string
	StartAt        string
	EndAt          string
	Notes          string
	ShiftTypeID    string
	ShiftTermID    string
}{
	ID:             "id",
	OrganizationID: "organization_id",
	StartAt:        "start_at",
	EndAt:          "end_at",
	Notes:          "notes",
	ShiftTypeID:    "shift_type_id",
	ShiftTermID:    "shift_term_id",
}

var ShiftTableColumns = struct {
	ID             string
	OrganizationID string
	StartAt        string
	EndAt          string
	Notes          string
	ShiftTypeID    string
	ShiftTermID    string
}{
	ID:             "shifts.id",
	OrganizationID: "shifts.organization_id",
	StartAt:        "shifts.start_at",
	EndAt:          "shifts.end_at",
	Notes:          "shifts.notes",
	ShiftTypeID:    "shifts.shift_type_id",
	ShiftTermID:    "shifts.shift_term_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ShiftWhere = struct {
	ID             whereHelperstring
	OrganizationID whereHelperstring
	StartAt        whereHelpertime_Time
	EndAt          whereHelpertime_Time
	Notes          whereHelperstring
	ShiftTypeID    whereHelperstring
	ShiftTermID    whereHelpernull_String
}{
	ID:             whereHelperstring{field: "\"shifts\".\"id\""},
	OrganizationID: whereHelperstring{field: "\"shifts\".\"organization_id\""},
	StartAt:        whereHelpertime_Time{field: "\"shifts\".\"start_at\""},
	EndAt:          whereHelpertime_Time{field: "\"shifts\".\"end_at\""},
	Notes:          whereHelperstring{field: "\"shifts\".\"notes\""},
	ShiftTypeID:    whereHelperstring{field: "\"shifts\".\"shift_type_id\""},
	ShiftTermID:    whereHelpernull_String{field: "\"shifts\".\"shift_term_id\""},
}

// ShiftRels is where relationship names are stored.
var ShiftRels = struct {
	Organization     string
	ShiftTerm        string
	ShiftType        string
	ShiftAssignments string
}{
	Organization:     "Organization",
	ShiftTerm:        "ShiftTerm",
	ShiftType:        "ShiftType",
	ShiftAssignments: "ShiftAssignments",
}

// shiftR is where relationships are stored.
type shiftR struct {
	Organization     *Organization        `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	ShiftTerm        *ShiftTerm           `boil:"ShiftTerm" json:"ShiftTerm" toml:"ShiftTerm" yaml:"ShiftTerm"`
	ShiftType        *ShiftType           `boil:"ShiftType" json:"ShiftType" toml:"ShiftType" yaml:"ShiftType"`
	ShiftAssignments ShiftAssignmentSlice `boil:"ShiftAssignments" json:"ShiftAssignments" toml:"ShiftAssignments" yaml:"ShiftAssignments"`
}

// NewStruct creates a new relationship struct
func (*shiftR) NewStruct() *shiftR {
	return &shiftR{}
}

func (r *shiftR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *shiftR) GetShiftTerm() *ShiftTerm {
	if r == nil {
		return nil
	}
	return r.ShiftTerm
}

func (r *shiftR) GetShiftType() *ShiftType {
	if r == nil {
		return nil
	}
	return r.ShiftType
}

func (r *shiftR) GetShiftAssignments() ShiftAssignmentSlice {
	if r == nil {
		return nil
	}
	return r.ShiftAssignments
}

// shiftL is where Load methods for each relationship are stored.
type shiftL struct{}

var (
	shiftAllColumns            = []string{"id", "organization_id", "start_at", "end_at", "notes", "shift_type_id", "shift_term_id"}
	shiftColumnsWithoutDefault = []string{"organization_id", "start_at", "end_at", "shift_type_id"}
	shiftColumnsWithDefault    = []string{"id", "notes", "shift_term_id"}
	shiftPrimaryKeyColumns     = []string{"id"}
	shiftGeneratedColumns      = []string{}
)

type (
	// ShiftSlice is an alias for a slice of pointers to Shift.
	// This should almost always be used instead of []Shift.
	ShiftSlice []*Shift
	// ShiftHook is the signature for custom Shift hook methods
	ShiftHook func(context.Context, boil.ContextExecutor, *Shift) error

	shiftQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shiftType                 = reflect.TypeOf(&Shift{})
	shiftMapping              = queries.MakeStructMapping(shiftType)
	shiftPrimaryKeyMapping, _ = queries.BindMapping(shiftType, shiftMapping, shiftPrimaryKeyColumns)
	shiftInsertCacheMut       sync.RWMutex
	shiftInsertCache          = make(map[string]insertCache)
	shiftUpdateCacheMut       sync.RWMutex
	shiftUpdateCache          = make(map[string]updateCache)
	shiftUpsertCacheMut       sync.RWMutex
	shiftUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shiftAfterSelectHooks []ShiftHook

var shiftBeforeInsertHooks []ShiftHook
var shiftAfterInsertHooks []ShiftHook

var shiftBeforeUpdateHooks []ShiftHook
var shiftAfterUpdateHooks []ShiftHook

var shiftBeforeDeleteHooks []ShiftHook
var shiftAfterDeleteHooks []ShiftHook

var shiftBeforeUpsertHooks []ShiftHook
var shiftAfterUpsertHooks []ShiftHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Shift) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Shift) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Shift) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Shift) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Shift) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Shift) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Shift) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Shift) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Shift) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShiftHook registers your hook function for all future operations.
func AddShiftHook(hookPoint boil.HookPoint, shiftHook ShiftHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shiftAfterSelectHooks = append(shiftAfterSelectHooks, shiftHook)
	case boil.BeforeInsertHook:
		shiftBeforeInsertHooks = append(shiftBeforeInsertHooks, shiftHook)
	case boil.AfterInsertHook:
		shiftAfterInsertHooks = append(shiftAfterInsertHooks, shiftHook)
	case boil.BeforeUpdateHook:
		shiftBeforeUpdateHooks = append(shiftBeforeUpdateHooks, shiftHook)
	case boil.AfterUpdateHook:
		shiftAfterUpdateHooks = append(shiftAfterUpdateHooks, shiftHook)
	case boil.BeforeDeleteHook:
		shiftBeforeDeleteHooks = append(shiftBeforeDeleteHooks, shiftHook)
	case boil.AfterDeleteHook:
		shiftAfterDeleteHooks = append(shiftAfterDeleteHooks, shiftHook)
	case boil.BeforeUpsertHook:
		shiftBeforeUpsertHooks = append(shiftBeforeUpsertHooks, shiftHook)
	case boil.AfterUpsertHook:
		shiftAfterUpsertHooks = append(shiftAfterUpsertHooks, shiftHook)
	}
}

// OneP returns a single shift record from the query, and panics on error.
func (q shiftQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *Shift {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single shift record from the query.
func (q shiftQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Shift, error) {
	o := &Shift{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shifts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Shift records from the query, and panics on error.
func (q shiftQuery) AllP(ctx context.Context, exec boil.ContextExecutor) ShiftSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Shift records from the query.
func (q shiftQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShiftSlice, error) {
	var o []*Shift

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Shift slice")
	}

	if len(shiftAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Shift records in the query, and panics on error.
func (q shiftQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Shift records in the query.
func (q shiftQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shifts rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q shiftQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q shiftQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shifts exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *Shift) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// ShiftTerm pointed to by the foreign key.
func (o *Shift) ShiftTerm(mods ...qm.QueryMod) shiftTermQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShiftTermID),
	}

	queryMods = append(queryMods, mods...)

	return ShiftTerms(queryMods...)
}

// ShiftType pointed to by the foreign key.
func (o *Shift) ShiftType(mods ...qm.QueryMod) shiftTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShiftTypeID),
	}

	queryMods = append(queryMods, mods...)

	return ShiftTypes(queryMods...)
}

// ShiftAssignments retrieves all the shift_assignment's ShiftAssignments with an executor.
func (o *Shift) ShiftAssignments(mods ...qm.QueryMod) shiftAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shift_assignments\".\"shift_id\"=?", o.ID),
	)

	return ShiftAssignments(queryMods...)
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShift interface{}, mods queries.Applicator) error {
	var slice []*Shift
	var object *Shift

	if singular {
		var ok bool
		object, ok = maybeShift.(*Shift)
		if !ok {
			object = new(Shift)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShift))
			}
		}
	} else {
		s, ok := maybeShift.(*[]*Shift)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShift))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.Shifts = append(foreign.R.Shifts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Shifts = append(foreign.R.Shifts, local)
				break
			}
		}
	}

	return nil
}

// LoadShiftTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftL) LoadShiftTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShift interface{}, mods queries.Applicator) error {
	var slice []*Shift
	var object *Shift

	if singular {
		var ok bool
		object, ok = maybeShift.(*Shift)
		if !ok {
			object = new(Shift)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShift))
			}
		}
	} else {
		s, ok := maybeShift.(*[]*Shift)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShift))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftR{}
		}
		if !queries.IsNil(object.ShiftTermID) {
			args = append(args, object.ShiftTermID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ShiftTermID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ShiftTermID) {
				args = append(args, obj.ShiftTermID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shift_terms`),
		qm.WhereIn(`shift_terms.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShiftTerm")
	}

	var resultSlice []*ShiftTerm
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShiftTerm")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shift_terms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shift_terms")
	}

	if len(shiftTermAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShiftTerm = foreign
		if foreign.R == nil {
			foreign.R = &shiftTermR{}
		}
		foreign.R.Shifts = append(foreign.R.Shifts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ShiftTermID, foreign.ID) {
				local.R.ShiftTerm = foreign
				if foreign.R == nil {
					foreign.R = &shiftTermR{}
				}
				foreign.R.Shifts = append(foreign.R.Shifts, local)
				break
			}
		}
	}

	return nil
}

// LoadShiftType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftL) LoadShiftType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShift interface{}, mods queries.Applicator) error {
	var slice []*Shift
	var object *Shift

	if singular {
		var ok bool
		object, ok = maybeShift.(*Shift)
		if !ok {
			object = new(Shift)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShift))
			}
		}
	} else {
		s, ok := maybeShift.(*[]*Shift)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShift))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftR{}
		}
		args = append(args, object.ShiftTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftR{}
			}

			for _, a := range args {
				if a == obj.ShiftTypeID {
					continue Outer
				}
			}

			args = append(args, obj.ShiftTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shift_types`),
		qm.WhereIn(`shift_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShiftType")
	}

	var resultSlice []*ShiftType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShiftType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shift_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shift_types")
	}

	if len(shiftTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShiftType = foreign
		if foreign.R == nil {
			foreign.R = &shiftTypeR{}
		}
		foreign.R.Shifts = append(foreign.R.Shifts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShiftTypeID == foreign.ID {
				local.R.ShiftType = foreign
				if foreign.R == nil {
					foreign.R = &shiftTypeR{}
				}
				foreign.R.Shifts = append(foreign.R.Shifts, local)
				break
			}
		}
	}

	return nil
}

// LoadShiftAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shiftL) LoadShiftAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShift interface{}, mods queries.Applicator) error {
	var slice []*Shift
	var object *Shift

	if singular {
		var ok bool
		object, ok = maybeShift.(*Shift)
		if !ok {
			object = new(Shift)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShift))
			}
		}
	} else {
		s, ok := maybeShift.(*[]*Shift)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShift))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shift_assignments`),
		qm.WhereIn(`shift_assignments.shift_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shift_assignments")
	}

	var resultSlice []*ShiftAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shift_assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shift_assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shift_assignments")
	}

	if len(shiftAssignmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShiftAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shiftAssignmentR{}
			}
			foreign.R.Shift = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShiftID {
				local.R.ShiftAssignments = append(local.R.ShiftAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &shiftAssignmentR{}
				}
				foreign.R.Shift = local
				break
			}
		}
	}

	return nil
}

// SetOrganizationP of the shift to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Shifts.
// Panics on error.
func (o *Shift) SetOrganizationP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) {
	if err := o.SetOrganization(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrganization of the shift to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Shifts.
func (o *Shift) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shifts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &shiftR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			Shifts: ShiftSlice{o},
		}
	} else {
		related.R.Shifts = append(related.R.Shifts, o)
	}

	return nil
}

// SetShiftTermP of the shift to the related item.
// Sets o.R.ShiftTerm to related.
// Adds o to related.R.Shifts.
// Panics on error.
func (o *Shift) SetShiftTermP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShiftTerm) {
	if err := o.SetShiftTerm(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetShiftTerm of the shift to the related item.
// Sets o.R.ShiftTerm to related.
// Adds o to related.R.Shifts.
func (o *Shift) SetShiftTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShiftTerm) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shifts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shift_term_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ShiftTermID, related.ID)
	if o.R == nil {
		o.R = &shiftR{
			ShiftTerm: related,
		}
	} else {
		o.R.ShiftTerm = related
	}

	if related.R == nil {
		related.R = &shiftTermR{
			Shifts: ShiftSlice{o},
		}
	} else {
		related.R.Shifts = append(related.R.Shifts, o)
	}

	return nil
}

// RemoveShiftTermP relationship.
// Sets o.R.ShiftTerm to nil.
// Removes o from all passed in related items' relationships struct.
// Panics on error.
func (o *Shift) RemoveShiftTermP(ctx context.Context, exec boil.ContextExecutor, related *ShiftTerm) {
	if err := o.RemoveShiftTerm(ctx, exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveShiftTerm relationship.
// Sets o.R.ShiftTerm to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Shift) RemoveShiftTerm(ctx context.Context, exec boil.ContextExecutor, related *ShiftTerm) error {
	var err error

	queries.SetScanner(&o.ShiftTermID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("shift_term_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ShiftTerm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Shifts {
		if queries.Equal(o.ShiftTermID, ri.ShiftTermID) {
			continue
		}

		ln := len(related.R.Shifts)
		if ln > 1 && i < ln-1 {
			related.R.Shifts[i] = related.R.Shifts[ln-1]
		}
		related.R.Shifts = related.R.Shifts[:ln-1]
		break
	}
	return nil
}

// SetShiftTypeP of the shift to the related item.
// Sets o.R.ShiftType to related.
// Adds o to related.R.Shifts.
// Panics on error.
func (o *Shift) SetShiftTypeP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShiftType) {
	if err := o.SetShiftType(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetShiftType of the shift to the related item.
// Sets o.R.ShiftType to related.
// Adds o to related.R.Shifts.
func (o *Shift) SetShiftType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShiftType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shifts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shift_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShiftTypeID = related.ID
	if o.R == nil {
		o.R = &shiftR{
			ShiftType: related,
		}
	} else {
		o.R.ShiftType = related
	}

	if related.R == nil {
		related.R = &shiftTypeR{
			Shifts: ShiftSlice{o},
		}
	} else {
		related.R.Shifts = append(related.R.Shifts, o)
	}

	return nil
}

// AddShiftAssignmentsP adds the given related objects to the existing relationships
// of the shift, optionally inserting them as new records.
// Appends related to o.R.ShiftAssignments.
// Sets related.R.Shift appropriately.
// Panics on error.
func (o *Shift) AddShiftAssignmentsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftAssignment) {
	if err := o.AddShiftAssignments(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddShiftAssignments adds the given related objects to the existing relationships
// of the shift, optionally inserting them as new records.
// Appends related to o.R.ShiftAssignments.
// Sets related.R.Shift appropriately.
func (o *Shift) AddShiftAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShiftID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shift_assignments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shift_id"}),
				strmangle.WhereClause("\"", "\"", 2, shiftAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MemberID, rel.ShiftID, rel.OrganizationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShiftID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shiftR{
			ShiftAssignments: related,
		}
	} else {
		o.R.ShiftAssignments = append(o.R.ShiftAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shiftAssignmentR{
				Shift: o,
			}
		} else {
			rel.R.Shift = o
		}
	}
	return nil
}

// Shifts retrieves all the records using an executor.
func Shifts(mods ...qm.QueryMod) shiftQuery {
	mods = append(mods, qm.From("\"shifts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shifts\".*"})
	}

	return shiftQuery{q}
}

// FindShiftP retrieves a single record by ID with an executor, and panics on error.
func FindShiftP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *Shift {
	retobj, err := FindShift(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindShift retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShift(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Shift, error) {
	shiftObj := &Shift{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shifts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shiftObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shifts")
	}

	if err = shiftObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shiftObj, err
	}

	return shiftObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Shift) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Shift) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shifts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shiftInsertCacheMut.RLock()
	cache, cached := shiftInsertCache[key]
	shiftInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shiftAllColumns,
			shiftColumnsWithDefault,
			shiftColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shiftType, shiftMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shiftType, shiftMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shifts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shifts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shifts")
	}

	if !cached {
		shiftInsertCacheMut.Lock()
		shiftInsertCache[key] = cache
		shiftInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateP uses an executor to update the Shift, and panics on error.
// See Update for more documentation.
func (o *Shift) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the Shift.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Shift) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shiftUpdateCacheMut.RLock()
	cache, cached := shiftUpdateCache[key]
	shiftUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shiftAllColumns,
			shiftPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shifts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shifts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shiftPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shiftType, shiftMapping, append(wl, shiftPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shifts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shifts")
	}

	if !cached {
		shiftUpdateCacheMut.Lock()
		shiftUpdateCache[key] = cache
		shiftUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q shiftQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q shiftQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shifts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shifts")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ShiftSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShiftSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shifts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shiftPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shift slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shift")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Shift) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Shift) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shifts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shiftUpsertCacheMut.RLock()
	cache, cached := shiftUpsertCache[key]
	shiftUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shiftAllColumns,
			shiftColumnsWithDefault,
			shiftColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shiftAllColumns,
			shiftPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shifts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shiftPrimaryKeyColumns))
			copy(conflict, shiftPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shifts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shiftType, shiftMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shiftType, shiftMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shifts")
	}

	if !cached {
		shiftUpsertCacheMut.Lock()
		shiftUpsertCache[key] = cache
		shiftUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteP deletes a single Shift record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Shift) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single Shift record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Shift) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Shift provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shiftPrimaryKeyMapping)
	sql := "DELETE FROM \"shifts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shifts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shifts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q shiftQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q shiftQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shiftQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shifts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shifts")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ShiftSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShiftSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shiftBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shifts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shift slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shifts")
	}

	if len(shiftAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Shift) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Shift) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShift(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ShiftSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShiftSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShiftSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shifts\".* FROM \"shifts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShiftSlice")
	}

	*o = slice

	return nil
}

// ShiftExistsP checks if the Shift row exists. Panics on error.
func ShiftExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := ShiftExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ShiftExists checks if the Shift row exists.
func ShiftExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shifts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shifts exists")
	}

	return exists, nil
}

// Exists checks if the Shift row exists.
func (o *Shift) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShiftExists(ctx, exec, o.ID)
}
