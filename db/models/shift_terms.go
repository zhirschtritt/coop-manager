// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShiftTerm is an object representing the database table.
type ShiftTerm struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID string    `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	Name           string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	StartDate      time.Time `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate        time.Time `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`

	R *shiftTermR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shiftTermL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShiftTermColumns = struct {
	ID             string
	OrganizationID string
	Name           string
	StartDate      string
	EndDate        string
}{
	ID:             "id",
	OrganizationID: "organization_id",
	Name:           "name",
	StartDate:      "start_date",
	EndDate:        "end_date",
}

var ShiftTermTableColumns = struct {
	ID             string
	OrganizationID string
	Name           string
	StartDate      string
	EndDate        string
}{
	ID:             "shift_terms.id",
	OrganizationID: "shift_terms.organization_id",
	Name:           "shift_terms.name",
	StartDate:      "shift_terms.start_date",
	EndDate:        "shift_terms.end_date",
}

// Generated where

var ShiftTermWhere = struct {
	ID             whereHelperstring
	OrganizationID whereHelperstring
	Name           whereHelperstring
	StartDate      whereHelpertime_Time
	EndDate        whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"shift_terms\".\"id\""},
	OrganizationID: whereHelperstring{field: "\"shift_terms\".\"organization_id\""},
	Name:           whereHelperstring{field: "\"shift_terms\".\"name\""},
	StartDate:      whereHelpertime_Time{field: "\"shift_terms\".\"start_date\""},
	EndDate:        whereHelpertime_Time{field: "\"shift_terms\".\"end_date\""},
}

// ShiftTermRels is where relationship names are stored.
var ShiftTermRels = struct {
	Organization string
	Shifts       string
}{
	Organization: "Organization",
	Shifts:       "Shifts",
}

// shiftTermR is where relationships are stored.
type shiftTermR struct {
	Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	Shifts       ShiftSlice    `boil:"Shifts" json:"Shifts" toml:"Shifts" yaml:"Shifts"`
}

// NewStruct creates a new relationship struct
func (*shiftTermR) NewStruct() *shiftTermR {
	return &shiftTermR{}
}

func (r *shiftTermR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *shiftTermR) GetShifts() ShiftSlice {
	if r == nil {
		return nil
	}
	return r.Shifts
}

// shiftTermL is where Load methods for each relationship are stored.
type shiftTermL struct{}

var (
	shiftTermAllColumns            = []string{"id", "organization_id", "name", "start_date", "end_date"}
	shiftTermColumnsWithoutDefault = []string{"organization_id", "name", "start_date", "end_date"}
	shiftTermColumnsWithDefault    = []string{"id"}
	shiftTermPrimaryKeyColumns     = []string{"id"}
	shiftTermGeneratedColumns      = []string{}
)

type (
	// ShiftTermSlice is an alias for a slice of pointers to ShiftTerm.
	// This should almost always be used instead of []ShiftTerm.
	ShiftTermSlice []*ShiftTerm
	// ShiftTermHook is the signature for custom ShiftTerm hook methods
	ShiftTermHook func(context.Context, boil.ContextExecutor, *ShiftTerm) error

	shiftTermQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shiftTermType                 = reflect.TypeOf(&ShiftTerm{})
	shiftTermMapping              = queries.MakeStructMapping(shiftTermType)
	shiftTermPrimaryKeyMapping, _ = queries.BindMapping(shiftTermType, shiftTermMapping, shiftTermPrimaryKeyColumns)
	shiftTermInsertCacheMut       sync.RWMutex
	shiftTermInsertCache          = make(map[string]insertCache)
	shiftTermUpdateCacheMut       sync.RWMutex
	shiftTermUpdateCache          = make(map[string]updateCache)
	shiftTermUpsertCacheMut       sync.RWMutex
	shiftTermUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shiftTermAfterSelectHooks []ShiftTermHook

var shiftTermBeforeInsertHooks []ShiftTermHook
var shiftTermAfterInsertHooks []ShiftTermHook

var shiftTermBeforeUpdateHooks []ShiftTermHook
var shiftTermAfterUpdateHooks []ShiftTermHook

var shiftTermBeforeDeleteHooks []ShiftTermHook
var shiftTermAfterDeleteHooks []ShiftTermHook

var shiftTermBeforeUpsertHooks []ShiftTermHook
var shiftTermAfterUpsertHooks []ShiftTermHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShiftTerm) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTermAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShiftTerm) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTermBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShiftTerm) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTermAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShiftTerm) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTermBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShiftTerm) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTermAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShiftTerm) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTermBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShiftTerm) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTermAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShiftTerm) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTermBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShiftTerm) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftTermAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShiftTermHook registers your hook function for all future operations.
func AddShiftTermHook(hookPoint boil.HookPoint, shiftTermHook ShiftTermHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shiftTermAfterSelectHooks = append(shiftTermAfterSelectHooks, shiftTermHook)
	case boil.BeforeInsertHook:
		shiftTermBeforeInsertHooks = append(shiftTermBeforeInsertHooks, shiftTermHook)
	case boil.AfterInsertHook:
		shiftTermAfterInsertHooks = append(shiftTermAfterInsertHooks, shiftTermHook)
	case boil.BeforeUpdateHook:
		shiftTermBeforeUpdateHooks = append(shiftTermBeforeUpdateHooks, shiftTermHook)
	case boil.AfterUpdateHook:
		shiftTermAfterUpdateHooks = append(shiftTermAfterUpdateHooks, shiftTermHook)
	case boil.BeforeDeleteHook:
		shiftTermBeforeDeleteHooks = append(shiftTermBeforeDeleteHooks, shiftTermHook)
	case boil.AfterDeleteHook:
		shiftTermAfterDeleteHooks = append(shiftTermAfterDeleteHooks, shiftTermHook)
	case boil.BeforeUpsertHook:
		shiftTermBeforeUpsertHooks = append(shiftTermBeforeUpsertHooks, shiftTermHook)
	case boil.AfterUpsertHook:
		shiftTermAfterUpsertHooks = append(shiftTermAfterUpsertHooks, shiftTermHook)
	}
}

// OneP returns a single shiftTerm record from the query, and panics on error.
func (q shiftTermQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *ShiftTerm {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single shiftTerm record from the query.
func (q shiftTermQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShiftTerm, error) {
	o := &ShiftTerm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shift_terms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all ShiftTerm records from the query, and panics on error.
func (q shiftTermQuery) AllP(ctx context.Context, exec boil.ContextExecutor) ShiftTermSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ShiftTerm records from the query.
func (q shiftTermQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShiftTermSlice, error) {
	var o []*ShiftTerm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShiftTerm slice")
	}

	if len(shiftTermAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all ShiftTerm records in the query, and panics on error.
func (q shiftTermQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ShiftTerm records in the query.
func (q shiftTermQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shift_terms rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q shiftTermQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q shiftTermQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shift_terms exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *ShiftTerm) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// Shifts retrieves all the shift's Shifts with an executor.
func (o *ShiftTerm) Shifts(mods ...qm.QueryMod) shiftQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shifts\".\"shift_term_id\"=?", o.ID),
	)

	return Shifts(queryMods...)
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftTermL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftTerm interface{}, mods queries.Applicator) error {
	var slice []*ShiftTerm
	var object *ShiftTerm

	if singular {
		var ok bool
		object, ok = maybeShiftTerm.(*ShiftTerm)
		if !ok {
			object = new(ShiftTerm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftTerm))
			}
		}
	} else {
		s, ok := maybeShiftTerm.(*[]*ShiftTerm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftTermR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftTermR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.ShiftTerms = append(foreign.R.ShiftTerms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.ShiftTerms = append(foreign.R.ShiftTerms, local)
				break
			}
		}
	}

	return nil
}

// LoadShifts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shiftTermL) LoadShifts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftTerm interface{}, mods queries.Applicator) error {
	var slice []*ShiftTerm
	var object *ShiftTerm

	if singular {
		var ok bool
		object, ok = maybeShiftTerm.(*ShiftTerm)
		if !ok {
			object = new(ShiftTerm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftTerm))
			}
		}
	} else {
		s, ok := maybeShiftTerm.(*[]*ShiftTerm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftTermR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftTermR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shifts`),
		qm.WhereIn(`shifts.shift_term_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shifts")
	}

	var resultSlice []*Shift
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shifts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shifts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shifts")
	}

	if len(shiftAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Shifts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shiftR{}
			}
			foreign.R.ShiftTerm = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ShiftTermID) {
				local.R.Shifts = append(local.R.Shifts, foreign)
				if foreign.R == nil {
					foreign.R = &shiftR{}
				}
				foreign.R.ShiftTerm = local
				break
			}
		}
	}

	return nil
}

// SetOrganizationP of the shiftTerm to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.ShiftTerms.
// Panics on error.
func (o *ShiftTerm) SetOrganizationP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) {
	if err := o.SetOrganization(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrganization of the shiftTerm to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.ShiftTerms.
func (o *ShiftTerm) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shift_terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftTermPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &shiftTermR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			ShiftTerms: ShiftTermSlice{o},
		}
	} else {
		related.R.ShiftTerms = append(related.R.ShiftTerms, o)
	}

	return nil
}

// AddShiftsP adds the given related objects to the existing relationships
// of the shift_term, optionally inserting them as new records.
// Appends related to o.R.Shifts.
// Sets related.R.ShiftTerm appropriately.
// Panics on error.
func (o *ShiftTerm) AddShiftsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shift) {
	if err := o.AddShifts(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddShifts adds the given related objects to the existing relationships
// of the shift_term, optionally inserting them as new records.
// Appends related to o.R.Shifts.
// Sets related.R.ShiftTerm appropriately.
func (o *ShiftTerm) AddShifts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shift) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ShiftTermID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shifts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shift_term_id"}),
				strmangle.WhereClause("\"", "\"", 2, shiftPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ShiftTermID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shiftTermR{
			Shifts: related,
		}
	} else {
		o.R.Shifts = append(o.R.Shifts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shiftR{
				ShiftTerm: o,
			}
		} else {
			rel.R.ShiftTerm = o
		}
	}
	return nil
}

// SetShiftsP removes all previously related items of the
// shift_term replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShiftTerm's Shifts accordingly.
// Replaces o.R.Shifts with related.
// Sets related.R.ShiftTerm's Shifts accordingly.
// Panics on error.
func (o *ShiftTerm) SetShiftsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shift) {
	if err := o.SetShifts(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetShifts removes all previously related items of the
// shift_term replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShiftTerm's Shifts accordingly.
// Replaces o.R.Shifts with related.
// Sets related.R.ShiftTerm's Shifts accordingly.
func (o *ShiftTerm) SetShifts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shift) error {
	query := "update \"shifts\" set \"shift_term_id\" = null where \"shift_term_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Shifts {
			queries.SetScanner(&rel.ShiftTermID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShiftTerm = nil
		}
		o.R.Shifts = nil
	}

	return o.AddShifts(ctx, exec, insert, related...)
}

// RemoveShiftsP relationships from objects passed in.
// Removes related items from R.Shifts (uses pointer comparison, removal does not keep order)
// Sets related.R.ShiftTerm.
// Panics on error.
func (o *ShiftTerm) RemoveShiftsP(ctx context.Context, exec boil.ContextExecutor, related ...*Shift) {
	if err := o.RemoveShifts(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveShifts relationships from objects passed in.
// Removes related items from R.Shifts (uses pointer comparison, removal does not keep order)
// Sets related.R.ShiftTerm.
func (o *ShiftTerm) RemoveShifts(ctx context.Context, exec boil.ContextExecutor, related ...*Shift) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ShiftTermID, nil)
		if rel.R != nil {
			rel.R.ShiftTerm = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shift_term_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Shifts {
			if rel != ri {
				continue
			}

			ln := len(o.R.Shifts)
			if ln > 1 && i < ln-1 {
				o.R.Shifts[i] = o.R.Shifts[ln-1]
			}
			o.R.Shifts = o.R.Shifts[:ln-1]
			break
		}
	}

	return nil
}

// ShiftTerms retrieves all the records using an executor.
func ShiftTerms(mods ...qm.QueryMod) shiftTermQuery {
	mods = append(mods, qm.From("\"shift_terms\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shift_terms\".*"})
	}

	return shiftTermQuery{q}
}

// FindShiftTermP retrieves a single record by ID with an executor, and panics on error.
func FindShiftTermP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *ShiftTerm {
	retobj, err := FindShiftTerm(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindShiftTerm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShiftTerm(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ShiftTerm, error) {
	shiftTermObj := &ShiftTerm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shift_terms\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shiftTermObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shift_terms")
	}

	if err = shiftTermObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shiftTermObj, err
	}

	return shiftTermObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ShiftTerm) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShiftTerm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shift_terms provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftTermColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shiftTermInsertCacheMut.RLock()
	cache, cached := shiftTermInsertCache[key]
	shiftTermInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shiftTermAllColumns,
			shiftTermColumnsWithDefault,
			shiftTermColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shiftTermType, shiftTermMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shiftTermType, shiftTermMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shift_terms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shift_terms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shift_terms")
	}

	if !cached {
		shiftTermInsertCacheMut.Lock()
		shiftTermInsertCache[key] = cache
		shiftTermInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateP uses an executor to update the ShiftTerm, and panics on error.
// See Update for more documentation.
func (o *ShiftTerm) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the ShiftTerm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShiftTerm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shiftTermUpdateCacheMut.RLock()
	cache, cached := shiftTermUpdateCache[key]
	shiftTermUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shiftTermAllColumns,
			shiftTermPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shift_terms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shift_terms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shiftTermPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shiftTermType, shiftTermMapping, append(wl, shiftTermPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shift_terms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shift_terms")
	}

	if !cached {
		shiftTermUpdateCacheMut.Lock()
		shiftTermUpdateCache[key] = cache
		shiftTermUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q shiftTermQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q shiftTermQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shift_terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shift_terms")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ShiftTermSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShiftTermSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftTermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shift_terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shiftTermPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shiftTerm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shiftTerm")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ShiftTerm) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShiftTerm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shift_terms provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftTermColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shiftTermUpsertCacheMut.RLock()
	cache, cached := shiftTermUpsertCache[key]
	shiftTermUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shiftTermAllColumns,
			shiftTermColumnsWithDefault,
			shiftTermColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shiftTermAllColumns,
			shiftTermPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shift_terms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shiftTermPrimaryKeyColumns))
			copy(conflict, shiftTermPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shift_terms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shiftTermType, shiftTermMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shiftTermType, shiftTermMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shift_terms")
	}

	if !cached {
		shiftTermUpsertCacheMut.Lock()
		shiftTermUpsertCache[key] = cache
		shiftTermUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteP deletes a single ShiftTerm record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ShiftTerm) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single ShiftTerm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShiftTerm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShiftTerm provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shiftTermPrimaryKeyMapping)
	sql := "DELETE FROM \"shift_terms\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shift_terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shift_terms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q shiftTermQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q shiftTermQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shiftTermQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shift_terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shift_terms")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ShiftTermSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShiftTermSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shiftTermBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftTermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shift_terms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftTermPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shiftTerm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shift_terms")
	}

	if len(shiftTermAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ShiftTerm) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShiftTerm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShiftTerm(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ShiftTermSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShiftTermSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShiftTermSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftTermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shift_terms\".* FROM \"shift_terms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftTermPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShiftTermSlice")
	}

	*o = slice

	return nil
}

// ShiftTermExistsP checks if the ShiftTerm row exists. Panics on error.
func ShiftTermExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := ShiftTermExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ShiftTermExists checks if the ShiftTerm row exists.
func ShiftTermExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shift_terms\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shift_terms exists")
	}

	return exists, nil
}

// Exists checks if the ShiftTerm row exists.
func (o *ShiftTerm) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShiftTermExists(ctx, exec, o.ID)
}
