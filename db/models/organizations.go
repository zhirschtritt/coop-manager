// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Organization is an object representing the database table.
type Organization struct {
	ID        string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Data      types.JSON `boil:"data" json:"data" toml:"data" yaml:"data"`

	R *organizationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	Data      string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	Data:      "data",
}

var OrganizationTableColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	Data      string
}{
	ID:        "organizations.id",
	Name:      "organizations.name",
	CreatedAt: "organizations.created_at",
	Data:      "organizations.data",
}

// Generated where

var OrganizationWhere = struct {
	ID        whereHelperstring
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	Data      whereHelpertypes_JSON
}{
	ID:        whereHelperstring{field: "\"organizations\".\"id\""},
	Name:      whereHelperstring{field: "\"organizations\".\"name\""},
	CreatedAt: whereHelpertime_Time{field: "\"organizations\".\"created_at\""},
	Data:      whereHelpertypes_JSON{field: "\"organizations\".\"data\""},
}

// OrganizationRels is where relationship names are stored.
var OrganizationRels = struct {
	CoopEvents       string
	Members          string
	MembershipTypes  string
	Memberships      string
	ShiftAssignments string
	ShiftTerms       string
	ShiftTypes       string
	Shifts           string
}{
	CoopEvents:       "CoopEvents",
	Members:          "Members",
	MembershipTypes:  "MembershipTypes",
	Memberships:      "Memberships",
	ShiftAssignments: "ShiftAssignments",
	ShiftTerms:       "ShiftTerms",
	ShiftTypes:       "ShiftTypes",
	Shifts:           "Shifts",
}

// organizationR is where relationships are stored.
type organizationR struct {
	CoopEvents       CoopEventSlice       `boil:"CoopEvents" json:"CoopEvents" toml:"CoopEvents" yaml:"CoopEvents"`
	Members          MemberSlice          `boil:"Members" json:"Members" toml:"Members" yaml:"Members"`
	MembershipTypes  MembershipTypeSlice  `boil:"MembershipTypes" json:"MembershipTypes" toml:"MembershipTypes" yaml:"MembershipTypes"`
	Memberships      MembershipSlice      `boil:"Memberships" json:"Memberships" toml:"Memberships" yaml:"Memberships"`
	ShiftAssignments ShiftAssignmentSlice `boil:"ShiftAssignments" json:"ShiftAssignments" toml:"ShiftAssignments" yaml:"ShiftAssignments"`
	ShiftTerms       ShiftTermSlice       `boil:"ShiftTerms" json:"ShiftTerms" toml:"ShiftTerms" yaml:"ShiftTerms"`
	ShiftTypes       ShiftTypeSlice       `boil:"ShiftTypes" json:"ShiftTypes" toml:"ShiftTypes" yaml:"ShiftTypes"`
	Shifts           ShiftSlice           `boil:"Shifts" json:"Shifts" toml:"Shifts" yaml:"Shifts"`
}

// NewStruct creates a new relationship struct
func (*organizationR) NewStruct() *organizationR {
	return &organizationR{}
}

func (r *organizationR) GetCoopEvents() CoopEventSlice {
	if r == nil {
		return nil
	}
	return r.CoopEvents
}

func (r *organizationR) GetMembers() MemberSlice {
	if r == nil {
		return nil
	}
	return r.Members
}

func (r *organizationR) GetMembershipTypes() MembershipTypeSlice {
	if r == nil {
		return nil
	}
	return r.MembershipTypes
}

func (r *organizationR) GetMemberships() MembershipSlice {
	if r == nil {
		return nil
	}
	return r.Memberships
}

func (r *organizationR) GetShiftAssignments() ShiftAssignmentSlice {
	if r == nil {
		return nil
	}
	return r.ShiftAssignments
}

func (r *organizationR) GetShiftTerms() ShiftTermSlice {
	if r == nil {
		return nil
	}
	return r.ShiftTerms
}

func (r *organizationR) GetShiftTypes() ShiftTypeSlice {
	if r == nil {
		return nil
	}
	return r.ShiftTypes
}

func (r *organizationR) GetShifts() ShiftSlice {
	if r == nil {
		return nil
	}
	return r.Shifts
}

// organizationL is where Load methods for each relationship are stored.
type organizationL struct{}

var (
	organizationAllColumns            = []string{"id", "name", "created_at", "data"}
	organizationColumnsWithoutDefault = []string{"id", "name"}
	organizationColumnsWithDefault    = []string{"created_at", "data"}
	organizationPrimaryKeyColumns     = []string{"id"}
	organizationGeneratedColumns      = []string{}
)

type (
	// OrganizationSlice is an alias for a slice of pointers to Organization.
	// This should almost always be used instead of []Organization.
	OrganizationSlice []*Organization
	// OrganizationHook is the signature for custom Organization hook methods
	OrganizationHook func(context.Context, boil.ContextExecutor, *Organization) error

	organizationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationType                 = reflect.TypeOf(&Organization{})
	organizationMapping              = queries.MakeStructMapping(organizationType)
	organizationPrimaryKeyMapping, _ = queries.BindMapping(organizationType, organizationMapping, organizationPrimaryKeyColumns)
	organizationInsertCacheMut       sync.RWMutex
	organizationInsertCache          = make(map[string]insertCache)
	organizationUpdateCacheMut       sync.RWMutex
	organizationUpdateCache          = make(map[string]updateCache)
	organizationUpsertCacheMut       sync.RWMutex
	organizationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationAfterSelectHooks []OrganizationHook

var organizationBeforeInsertHooks []OrganizationHook
var organizationAfterInsertHooks []OrganizationHook

var organizationBeforeUpdateHooks []OrganizationHook
var organizationAfterUpdateHooks []OrganizationHook

var organizationBeforeDeleteHooks []OrganizationHook
var organizationAfterDeleteHooks []OrganizationHook

var organizationBeforeUpsertHooks []OrganizationHook
var organizationAfterUpsertHooks []OrganizationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Organization) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Organization) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Organization) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Organization) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Organization) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Organization) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Organization) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Organization) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Organization) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationHook registers your hook function for all future operations.
func AddOrganizationHook(hookPoint boil.HookPoint, organizationHook OrganizationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		organizationAfterSelectHooks = append(organizationAfterSelectHooks, organizationHook)
	case boil.BeforeInsertHook:
		organizationBeforeInsertHooks = append(organizationBeforeInsertHooks, organizationHook)
	case boil.AfterInsertHook:
		organizationAfterInsertHooks = append(organizationAfterInsertHooks, organizationHook)
	case boil.BeforeUpdateHook:
		organizationBeforeUpdateHooks = append(organizationBeforeUpdateHooks, organizationHook)
	case boil.AfterUpdateHook:
		organizationAfterUpdateHooks = append(organizationAfterUpdateHooks, organizationHook)
	case boil.BeforeDeleteHook:
		organizationBeforeDeleteHooks = append(organizationBeforeDeleteHooks, organizationHook)
	case boil.AfterDeleteHook:
		organizationAfterDeleteHooks = append(organizationAfterDeleteHooks, organizationHook)
	case boil.BeforeUpsertHook:
		organizationBeforeUpsertHooks = append(organizationBeforeUpsertHooks, organizationHook)
	case boil.AfterUpsertHook:
		organizationAfterUpsertHooks = append(organizationAfterUpsertHooks, organizationHook)
	}
}

// OneP returns a single organization record from the query, and panics on error.
func (q organizationQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *Organization {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single organization record from the query.
func (q organizationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Organization, error) {
	o := &Organization{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for organizations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Organization records from the query, and panics on error.
func (q organizationQuery) AllP(ctx context.Context, exec boil.ContextExecutor) OrganizationSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Organization records from the query.
func (q organizationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationSlice, error) {
	var o []*Organization

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Organization slice")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Organization records in the query, and panics on error.
func (q organizationQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Organization records in the query.
func (q organizationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count organizations rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q organizationQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q organizationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if organizations exists")
	}

	return count > 0, nil
}

// CoopEvents retrieves all the coop_event's CoopEvents with an executor.
func (o *Organization) CoopEvents(mods ...qm.QueryMod) coopEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"coop_events\".\"organization_id\"=?", o.ID),
	)

	return CoopEvents(queryMods...)
}

// Members retrieves all the member's Members with an executor.
func (o *Organization) Members(mods ...qm.QueryMod) memberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"members\".\"organization_id\"=?", o.ID),
	)

	return Members(queryMods...)
}

// MembershipTypes retrieves all the membership_type's MembershipTypes with an executor.
func (o *Organization) MembershipTypes(mods ...qm.QueryMod) membershipTypeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"membership_types\".\"organization_id\"=?", o.ID),
	)

	return MembershipTypes(queryMods...)
}

// Memberships retrieves all the membership's Memberships with an executor.
func (o *Organization) Memberships(mods ...qm.QueryMod) membershipQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"memberships\".\"organization_id\"=?", o.ID),
	)

	return Memberships(queryMods...)
}

// ShiftAssignments retrieves all the shift_assignment's ShiftAssignments with an executor.
func (o *Organization) ShiftAssignments(mods ...qm.QueryMod) shiftAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shift_assignments\".\"organization_id\"=?", o.ID),
	)

	return ShiftAssignments(queryMods...)
}

// ShiftTerms retrieves all the shift_term's ShiftTerms with an executor.
func (o *Organization) ShiftTerms(mods ...qm.QueryMod) shiftTermQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shift_terms\".\"organization_id\"=?", o.ID),
	)

	return ShiftTerms(queryMods...)
}

// ShiftTypes retrieves all the shift_type's ShiftTypes with an executor.
func (o *Organization) ShiftTypes(mods ...qm.QueryMod) shiftTypeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shift_types\".\"organization_id\"=?", o.ID),
	)

	return ShiftTypes(queryMods...)
}

// Shifts retrieves all the shift's Shifts with an executor.
func (o *Organization) Shifts(mods ...qm.QueryMod) shiftQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shifts\".\"organization_id\"=?", o.ID),
	)

	return Shifts(queryMods...)
}

// LoadCoopEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadCoopEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		var ok bool
		object, ok = maybeOrganization.(*Organization)
		if !ok {
			object = new(Organization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganization))
			}
		}
	} else {
		s, ok := maybeOrganization.(*[]*Organization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganization))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coop_events`),
		qm.WhereIn(`coop_events.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load coop_events")
	}

	var resultSlice []*CoopEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice coop_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on coop_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coop_events")
	}

	if len(coopEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CoopEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &coopEventR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.CoopEvents = append(local.R.CoopEvents, foreign)
				if foreign.R == nil {
					foreign.R = &coopEventR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadMembers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		var ok bool
		object, ok = maybeOrganization.(*Organization)
		if !ok {
			object = new(Organization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganization))
			}
		}
	} else {
		s, ok := maybeOrganization.(*[]*Organization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganization))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`members`),
		qm.WhereIn(`members.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load members")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice members")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for members")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Members = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &memberR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.Members = append(local.R.Members, foreign)
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadMembershipTypes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadMembershipTypes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		var ok bool
		object, ok = maybeOrganization.(*Organization)
		if !ok {
			object = new(Organization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganization))
			}
		}
	} else {
		s, ok := maybeOrganization.(*[]*Organization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganization))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`membership_types`),
		qm.WhereIn(`membership_types.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load membership_types")
	}

	var resultSlice []*MembershipType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice membership_types")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on membership_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for membership_types")
	}

	if len(membershipTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MembershipTypes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &membershipTypeR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.MembershipTypes = append(local.R.MembershipTypes, foreign)
				if foreign.R == nil {
					foreign.R = &membershipTypeR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadMemberships allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadMemberships(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		var ok bool
		object, ok = maybeOrganization.(*Organization)
		if !ok {
			object = new(Organization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganization))
			}
		}
	} else {
		s, ok := maybeOrganization.(*[]*Organization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganization))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`memberships`),
		qm.WhereIn(`memberships.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load memberships")
	}

	var resultSlice []*Membership
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice memberships")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on memberships")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for memberships")
	}

	if len(membershipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Memberships = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &membershipR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.Memberships = append(local.R.Memberships, foreign)
				if foreign.R == nil {
					foreign.R = &membershipR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadShiftAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadShiftAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		var ok bool
		object, ok = maybeOrganization.(*Organization)
		if !ok {
			object = new(Organization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganization))
			}
		}
	} else {
		s, ok := maybeOrganization.(*[]*Organization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganization))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shift_assignments`),
		qm.WhereIn(`shift_assignments.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shift_assignments")
	}

	var resultSlice []*ShiftAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shift_assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shift_assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shift_assignments")
	}

	if len(shiftAssignmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShiftAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shiftAssignmentR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.ShiftAssignments = append(local.R.ShiftAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &shiftAssignmentR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadShiftTerms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadShiftTerms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		var ok bool
		object, ok = maybeOrganization.(*Organization)
		if !ok {
			object = new(Organization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganization))
			}
		}
	} else {
		s, ok := maybeOrganization.(*[]*Organization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganization))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shift_terms`),
		qm.WhereIn(`shift_terms.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shift_terms")
	}

	var resultSlice []*ShiftTerm
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shift_terms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shift_terms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shift_terms")
	}

	if len(shiftTermAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShiftTerms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shiftTermR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.ShiftTerms = append(local.R.ShiftTerms, foreign)
				if foreign.R == nil {
					foreign.R = &shiftTermR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadShiftTypes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadShiftTypes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		var ok bool
		object, ok = maybeOrganization.(*Organization)
		if !ok {
			object = new(Organization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganization))
			}
		}
	} else {
		s, ok := maybeOrganization.(*[]*Organization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganization))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shift_types`),
		qm.WhereIn(`shift_types.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shift_types")
	}

	var resultSlice []*ShiftType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shift_types")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shift_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shift_types")
	}

	if len(shiftTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShiftTypes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shiftTypeR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.ShiftTypes = append(local.R.ShiftTypes, foreign)
				if foreign.R == nil {
					foreign.R = &shiftTypeR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadShifts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadShifts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		var ok bool
		object, ok = maybeOrganization.(*Organization)
		if !ok {
			object = new(Organization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganization))
			}
		}
	} else {
		s, ok := maybeOrganization.(*[]*Organization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganization))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shifts`),
		qm.WhereIn(`shifts.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shifts")
	}

	var resultSlice []*Shift
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shifts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shifts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shifts")
	}

	if len(shiftAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Shifts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shiftR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.Shifts = append(local.R.Shifts, foreign)
				if foreign.R == nil {
					foreign.R = &shiftR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// AddCoopEventsP adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.CoopEvents.
// Sets related.R.Organization appropriately.
// Panics on error.
func (o *Organization) AddCoopEventsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CoopEvent) {
	if err := o.AddCoopEvents(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCoopEvents adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.CoopEvents.
// Sets related.R.Organization appropriately.
func (o *Organization) AddCoopEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CoopEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"coop_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, coopEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			CoopEvents: related,
		}
	} else {
		o.R.CoopEvents = append(o.R.CoopEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &coopEventR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddMembersP adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Members.
// Sets related.R.Organization appropriately.
// Panics on error.
func (o *Organization) AddMembersP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Member) {
	if err := o.AddMembers(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMembers adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Members.
// Sets related.R.Organization appropriately.
func (o *Organization) AddMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Member) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"members\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, memberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			Members: related,
		}
	} else {
		o.R.Members = append(o.R.Members, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &memberR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddMembershipTypesP adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.MembershipTypes.
// Sets related.R.Organization appropriately.
// Panics on error.
func (o *Organization) AddMembershipTypesP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MembershipType) {
	if err := o.AddMembershipTypes(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMembershipTypes adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.MembershipTypes.
// Sets related.R.Organization appropriately.
func (o *Organization) AddMembershipTypes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MembershipType) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"membership_types\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, membershipTypePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			MembershipTypes: related,
		}
	} else {
		o.R.MembershipTypes = append(o.R.MembershipTypes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &membershipTypeR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddMembershipsP adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Memberships.
// Sets related.R.Organization appropriately.
// Panics on error.
func (o *Organization) AddMembershipsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Membership) {
	if err := o.AddMemberships(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMemberships adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Memberships.
// Sets related.R.Organization appropriately.
func (o *Organization) AddMemberships(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Membership) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"memberships\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, membershipPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MemberID, rel.OrganizationID, rel.MembershipTypeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			Memberships: related,
		}
	} else {
		o.R.Memberships = append(o.R.Memberships, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &membershipR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddShiftAssignmentsP adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.ShiftAssignments.
// Sets related.R.Organization appropriately.
// Panics on error.
func (o *Organization) AddShiftAssignmentsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftAssignment) {
	if err := o.AddShiftAssignments(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddShiftAssignments adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.ShiftAssignments.
// Sets related.R.Organization appropriately.
func (o *Organization) AddShiftAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shift_assignments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, shiftAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MemberID, rel.ShiftID, rel.OrganizationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			ShiftAssignments: related,
		}
	} else {
		o.R.ShiftAssignments = append(o.R.ShiftAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shiftAssignmentR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddShiftTermsP adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.ShiftTerms.
// Sets related.R.Organization appropriately.
// Panics on error.
func (o *Organization) AddShiftTermsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftTerm) {
	if err := o.AddShiftTerms(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddShiftTerms adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.ShiftTerms.
// Sets related.R.Organization appropriately.
func (o *Organization) AddShiftTerms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftTerm) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shift_terms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, shiftTermPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			ShiftTerms: related,
		}
	} else {
		o.R.ShiftTerms = append(o.R.ShiftTerms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shiftTermR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddShiftTypesP adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.ShiftTypes.
// Sets related.R.Organization appropriately.
// Panics on error.
func (o *Organization) AddShiftTypesP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftType) {
	if err := o.AddShiftTypes(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddShiftTypes adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.ShiftTypes.
// Sets related.R.Organization appropriately.
func (o *Organization) AddShiftTypes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftType) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shift_types\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, shiftTypePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			ShiftTypes: related,
		}
	} else {
		o.R.ShiftTypes = append(o.R.ShiftTypes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shiftTypeR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddShiftsP adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Shifts.
// Sets related.R.Organization appropriately.
// Panics on error.
func (o *Organization) AddShiftsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shift) {
	if err := o.AddShifts(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddShifts adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Shifts.
// Sets related.R.Organization appropriately.
func (o *Organization) AddShifts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shift) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shifts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, shiftPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			Shifts: related,
		}
	} else {
		o.R.Shifts = append(o.R.Shifts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shiftR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// Organizations retrieves all the records using an executor.
func Organizations(mods ...qm.QueryMod) organizationQuery {
	mods = append(mods, qm.From("\"organizations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"organizations\".*"})
	}

	return organizationQuery{q}
}

// FindOrganizationP retrieves a single record by ID with an executor, and panics on error.
func FindOrganizationP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *Organization {
	retobj, err := FindOrganization(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindOrganization retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganization(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Organization, error) {
	organizationObj := &Organization{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organizations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, organizationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from organizations")
	}

	if err = organizationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return organizationObj, err
	}

	return organizationObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Organization) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Organization) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationInsertCacheMut.RLock()
	cache, cached := organizationInsertCache[key]
	organizationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationAllColumns,
			organizationColumnsWithDefault,
			organizationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationType, organizationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organizations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organizations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into organizations")
	}

	if !cached {
		organizationInsertCacheMut.Lock()
		organizationInsertCache[key] = cache
		organizationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateP uses an executor to update the Organization, and panics on error.
// See Update for more documentation.
func (o *Organization) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the Organization.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Organization) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationUpdateCacheMut.RLock()
	cache, cached := organizationUpdateCache[key]
	organizationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationAllColumns,
			organizationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update organizations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organizations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organizationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, append(wl, organizationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update organizations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for organizations")
	}

	if !cached {
		organizationUpdateCacheMut.Lock()
		organizationUpdateCache[key] = cache
		organizationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q organizationQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q organizationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for organizations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for organizations")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o OrganizationSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organizations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organizationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organization")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Organization) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Organization) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationUpsertCacheMut.RLock()
	cache, cached := organizationUpsertCache[key]
	organizationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationAllColumns,
			organizationColumnsWithDefault,
			organizationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			organizationAllColumns,
			organizationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert organizations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organizationPrimaryKeyColumns))
			copy(conflict, organizationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organizations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationType, organizationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert organizations")
	}

	if !cached {
		organizationUpsertCacheMut.Lock()
		organizationUpsertCache[key] = cache
		organizationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteP deletes a single Organization record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Organization) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single Organization record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Organization) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Organization provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationPrimaryKeyMapping)
	sql := "DELETE FROM \"organizations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from organizations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for organizations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q organizationQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q organizationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizations")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o OrganizationSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organizations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizations")
	}

	if len(organizationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Organization) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Organization) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganization(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OrganizationSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organizations\".* FROM \"organizations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationSlice")
	}

	*o = slice

	return nil
}

// OrganizationExistsP checks if the Organization row exists. Panics on error.
func OrganizationExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := OrganizationExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// OrganizationExists checks if the Organization row exists.
func OrganizationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organizations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if organizations exists")
	}

	return exists, nil
}

// Exists checks if the Organization row exists.
func (o *Organization) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrganizationExists(ctx, exec, o.ID)
}
