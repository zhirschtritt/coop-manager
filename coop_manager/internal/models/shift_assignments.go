// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShiftAssignment is an object representing the database table.
type ShiftAssignment struct {
	OrganizationID string `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	MemberID       string `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	ShiftID        string `boil:"shift_id" json:"shift_id" toml:"shift_id" yaml:"shift_id"`
	ShiftSlotID    string `boil:"shift_slot_id" json:"shift_slot_id" toml:"shift_slot_id" yaml:"shift_slot_id"`
	CreatedBy      string `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`

	R *shiftAssignmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shiftAssignmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShiftAssignmentColumns = struct {
	OrganizationID string
	MemberID       string
	ShiftID        string
	ShiftSlotID    string
	CreatedBy      string
}{
	OrganizationID: "organization_id",
	MemberID:       "member_id",
	ShiftID:        "shift_id",
	ShiftSlotID:    "shift_slot_id",
	CreatedBy:      "created_by",
}

var ShiftAssignmentTableColumns = struct {
	OrganizationID string
	MemberID       string
	ShiftID        string
	ShiftSlotID    string
	CreatedBy      string
}{
	OrganizationID: "shift_assignments.organization_id",
	MemberID:       "shift_assignments.member_id",
	ShiftID:        "shift_assignments.shift_id",
	ShiftSlotID:    "shift_assignments.shift_slot_id",
	CreatedBy:      "shift_assignments.created_by",
}

// Generated where

var ShiftAssignmentWhere = struct {
	OrganizationID whereHelperstring
	MemberID       whereHelperstring
	ShiftID        whereHelperstring
	ShiftSlotID    whereHelperstring
	CreatedBy      whereHelperstring
}{
	OrganizationID: whereHelperstring{field: "\"shift_assignments\".\"organization_id\""},
	MemberID:       whereHelperstring{field: "\"shift_assignments\".\"member_id\""},
	ShiftID:        whereHelperstring{field: "\"shift_assignments\".\"shift_id\""},
	ShiftSlotID:    whereHelperstring{field: "\"shift_assignments\".\"shift_slot_id\""},
	CreatedBy:      whereHelperstring{field: "\"shift_assignments\".\"created_by\""},
}

// ShiftAssignmentRels is where relationship names are stored.
var ShiftAssignmentRels = struct {
	CreatedByCoopEvent string
	Member             string
	Organization       string
	Shift              string
	ShiftSlot          string
}{
	CreatedByCoopEvent: "CreatedByCoopEvent",
	Member:             "Member",
	Organization:       "Organization",
	Shift:              "Shift",
	ShiftSlot:          "ShiftSlot",
}

// shiftAssignmentR is where relationships are stored.
type shiftAssignmentR struct {
	CreatedByCoopEvent *CoopEvent    `boil:"CreatedByCoopEvent" json:"CreatedByCoopEvent" toml:"CreatedByCoopEvent" yaml:"CreatedByCoopEvent"`
	Member             *Member       `boil:"Member" json:"Member" toml:"Member" yaml:"Member"`
	Organization       *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	Shift              *Shift        `boil:"Shift" json:"Shift" toml:"Shift" yaml:"Shift"`
	ShiftSlot          *ShiftSlot    `boil:"ShiftSlot" json:"ShiftSlot" toml:"ShiftSlot" yaml:"ShiftSlot"`
}

// NewStruct creates a new relationship struct
func (*shiftAssignmentR) NewStruct() *shiftAssignmentR {
	return &shiftAssignmentR{}
}

func (r *shiftAssignmentR) GetCreatedByCoopEvent() *CoopEvent {
	if r == nil {
		return nil
	}
	return r.CreatedByCoopEvent
}

func (r *shiftAssignmentR) GetMember() *Member {
	if r == nil {
		return nil
	}
	return r.Member
}

func (r *shiftAssignmentR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *shiftAssignmentR) GetShift() *Shift {
	if r == nil {
		return nil
	}
	return r.Shift
}

func (r *shiftAssignmentR) GetShiftSlot() *ShiftSlot {
	if r == nil {
		return nil
	}
	return r.ShiftSlot
}

// shiftAssignmentL is where Load methods for each relationship are stored.
type shiftAssignmentL struct{}

var (
	shiftAssignmentAllColumns            = []string{"organization_id", "member_id", "shift_id", "shift_slot_id", "created_by"}
	shiftAssignmentColumnsWithoutDefault = []string{"organization_id", "member_id", "shift_id", "shift_slot_id", "created_by"}
	shiftAssignmentColumnsWithDefault    = []string{}
	shiftAssignmentPrimaryKeyColumns     = []string{"member_id", "shift_id", "shift_slot_id", "organization_id"}
	shiftAssignmentGeneratedColumns      = []string{}
)

type (
	// ShiftAssignmentSlice is an alias for a slice of pointers to ShiftAssignment.
	// This should almost always be used instead of []ShiftAssignment.
	ShiftAssignmentSlice []*ShiftAssignment
	// ShiftAssignmentHook is the signature for custom ShiftAssignment hook methods
	ShiftAssignmentHook func(context.Context, boil.ContextExecutor, *ShiftAssignment) error

	shiftAssignmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shiftAssignmentType                 = reflect.TypeOf(&ShiftAssignment{})
	shiftAssignmentMapping              = queries.MakeStructMapping(shiftAssignmentType)
	shiftAssignmentPrimaryKeyMapping, _ = queries.BindMapping(shiftAssignmentType, shiftAssignmentMapping, shiftAssignmentPrimaryKeyColumns)
	shiftAssignmentInsertCacheMut       sync.RWMutex
	shiftAssignmentInsertCache          = make(map[string]insertCache)
	shiftAssignmentUpdateCacheMut       sync.RWMutex
	shiftAssignmentUpdateCache          = make(map[string]updateCache)
	shiftAssignmentUpsertCacheMut       sync.RWMutex
	shiftAssignmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shiftAssignmentAfterSelectHooks []ShiftAssignmentHook

var shiftAssignmentBeforeInsertHooks []ShiftAssignmentHook
var shiftAssignmentAfterInsertHooks []ShiftAssignmentHook

var shiftAssignmentBeforeUpdateHooks []ShiftAssignmentHook
var shiftAssignmentAfterUpdateHooks []ShiftAssignmentHook

var shiftAssignmentBeforeDeleteHooks []ShiftAssignmentHook
var shiftAssignmentAfterDeleteHooks []ShiftAssignmentHook

var shiftAssignmentBeforeUpsertHooks []ShiftAssignmentHook
var shiftAssignmentAfterUpsertHooks []ShiftAssignmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShiftAssignment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAssignmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShiftAssignment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAssignmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShiftAssignment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAssignmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShiftAssignment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAssignmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShiftAssignment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAssignmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShiftAssignment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAssignmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShiftAssignment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAssignmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShiftAssignment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAssignmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShiftAssignment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftAssignmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShiftAssignmentHook registers your hook function for all future operations.
func AddShiftAssignmentHook(hookPoint boil.HookPoint, shiftAssignmentHook ShiftAssignmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shiftAssignmentAfterSelectHooks = append(shiftAssignmentAfterSelectHooks, shiftAssignmentHook)
	case boil.BeforeInsertHook:
		shiftAssignmentBeforeInsertHooks = append(shiftAssignmentBeforeInsertHooks, shiftAssignmentHook)
	case boil.AfterInsertHook:
		shiftAssignmentAfterInsertHooks = append(shiftAssignmentAfterInsertHooks, shiftAssignmentHook)
	case boil.BeforeUpdateHook:
		shiftAssignmentBeforeUpdateHooks = append(shiftAssignmentBeforeUpdateHooks, shiftAssignmentHook)
	case boil.AfterUpdateHook:
		shiftAssignmentAfterUpdateHooks = append(shiftAssignmentAfterUpdateHooks, shiftAssignmentHook)
	case boil.BeforeDeleteHook:
		shiftAssignmentBeforeDeleteHooks = append(shiftAssignmentBeforeDeleteHooks, shiftAssignmentHook)
	case boil.AfterDeleteHook:
		shiftAssignmentAfterDeleteHooks = append(shiftAssignmentAfterDeleteHooks, shiftAssignmentHook)
	case boil.BeforeUpsertHook:
		shiftAssignmentBeforeUpsertHooks = append(shiftAssignmentBeforeUpsertHooks, shiftAssignmentHook)
	case boil.AfterUpsertHook:
		shiftAssignmentAfterUpsertHooks = append(shiftAssignmentAfterUpsertHooks, shiftAssignmentHook)
	}
}

// OneG returns a single shiftAssignment record from the query using the global executor.
func (q shiftAssignmentQuery) OneG(ctx context.Context) (*ShiftAssignment, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single shiftAssignment record from the query.
func (q shiftAssignmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShiftAssignment, error) {
	o := &ShiftAssignment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shift_assignments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ShiftAssignment records from the query using the global executor.
func (q shiftAssignmentQuery) AllG(ctx context.Context) (ShiftAssignmentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ShiftAssignment records from the query.
func (q shiftAssignmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShiftAssignmentSlice, error) {
	var o []*ShiftAssignment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShiftAssignment slice")
	}

	if len(shiftAssignmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ShiftAssignment records in the query using the global executor
func (q shiftAssignmentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ShiftAssignment records in the query.
func (q shiftAssignmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shift_assignments rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q shiftAssignmentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q shiftAssignmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shift_assignments exists")
	}

	return count > 0, nil
}

// CreatedByCoopEvent pointed to by the foreign key.
func (o *ShiftAssignment) CreatedByCoopEvent(mods ...qm.QueryMod) coopEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return CoopEvents(queryMods...)
}

// Member pointed to by the foreign key.
func (o *ShiftAssignment) Member(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// Organization pointed to by the foreign key.
func (o *ShiftAssignment) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// Shift pointed to by the foreign key.
func (o *ShiftAssignment) Shift(mods ...qm.QueryMod) shiftQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShiftID),
	}

	queryMods = append(queryMods, mods...)

	return Shifts(queryMods...)
}

// ShiftSlot pointed to by the foreign key.
func (o *ShiftAssignment) ShiftSlot(mods ...qm.QueryMod) shiftSlotQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShiftSlotID),
	}

	queryMods = append(queryMods, mods...)

	return ShiftSlots(queryMods...)
}

// LoadCreatedByCoopEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftAssignmentL) LoadCreatedByCoopEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftAssignment interface{}, mods queries.Applicator) error {
	var slice []*ShiftAssignment
	var object *ShiftAssignment

	if singular {
		var ok bool
		object, ok = maybeShiftAssignment.(*ShiftAssignment)
		if !ok {
			object = new(ShiftAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftAssignment))
			}
		}
	} else {
		s, ok := maybeShiftAssignment.(*[]*ShiftAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftAssignmentR{}
		}
		args = append(args, object.CreatedBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftAssignmentR{}
			}

			for _, a := range args {
				if a == obj.CreatedBy {
					continue Outer
				}
			}

			args = append(args, obj.CreatedBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coop_events`),
		qm.WhereIn(`coop_events.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CoopEvent")
	}

	var resultSlice []*CoopEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CoopEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for coop_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coop_events")
	}

	if len(coopEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByCoopEvent = foreign
		if foreign.R == nil {
			foreign.R = &coopEventR{}
		}
		foreign.R.CreatedByShiftAssignments = append(foreign.R.CreatedByShiftAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedBy == foreign.ID {
				local.R.CreatedByCoopEvent = foreign
				if foreign.R == nil {
					foreign.R = &coopEventR{}
				}
				foreign.R.CreatedByShiftAssignments = append(foreign.R.CreatedByShiftAssignments, local)
				break
			}
		}
	}

	return nil
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftAssignmentL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftAssignment interface{}, mods queries.Applicator) error {
	var slice []*ShiftAssignment
	var object *ShiftAssignment

	if singular {
		var ok bool
		object, ok = maybeShiftAssignment.(*ShiftAssignment)
		if !ok {
			object = new(ShiftAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftAssignment))
			}
		}
	} else {
		s, ok := maybeShiftAssignment.(*[]*ShiftAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftAssignmentR{}
		}
		args = append(args, object.MemberID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftAssignmentR{}
			}

			for _, a := range args {
				if a == obj.MemberID {
					continue Outer
				}
			}

			args = append(args, obj.MemberID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`members`),
		qm.WhereIn(`members.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for members")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.ShiftAssignments = append(foreign.R.ShiftAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.ID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.ShiftAssignments = append(foreign.R.ShiftAssignments, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftAssignmentL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftAssignment interface{}, mods queries.Applicator) error {
	var slice []*ShiftAssignment
	var object *ShiftAssignment

	if singular {
		var ok bool
		object, ok = maybeShiftAssignment.(*ShiftAssignment)
		if !ok {
			object = new(ShiftAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftAssignment))
			}
		}
	} else {
		s, ok := maybeShiftAssignment.(*[]*ShiftAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftAssignmentR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftAssignmentR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.ShiftAssignments = append(foreign.R.ShiftAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.ShiftAssignments = append(foreign.R.ShiftAssignments, local)
				break
			}
		}
	}

	return nil
}

// LoadShift allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftAssignmentL) LoadShift(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftAssignment interface{}, mods queries.Applicator) error {
	var slice []*ShiftAssignment
	var object *ShiftAssignment

	if singular {
		var ok bool
		object, ok = maybeShiftAssignment.(*ShiftAssignment)
		if !ok {
			object = new(ShiftAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftAssignment))
			}
		}
	} else {
		s, ok := maybeShiftAssignment.(*[]*ShiftAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftAssignmentR{}
		}
		args = append(args, object.ShiftID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftAssignmentR{}
			}

			for _, a := range args {
				if a == obj.ShiftID {
					continue Outer
				}
			}

			args = append(args, obj.ShiftID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shifts`),
		qm.WhereIn(`shifts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Shift")
	}

	var resultSlice []*Shift
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Shift")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shifts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shifts")
	}

	if len(shiftAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Shift = foreign
		if foreign.R == nil {
			foreign.R = &shiftR{}
		}
		foreign.R.ShiftAssignments = append(foreign.R.ShiftAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShiftID == foreign.ID {
				local.R.Shift = foreign
				if foreign.R == nil {
					foreign.R = &shiftR{}
				}
				foreign.R.ShiftAssignments = append(foreign.R.ShiftAssignments, local)
				break
			}
		}
	}

	return nil
}

// LoadShiftSlot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftAssignmentL) LoadShiftSlot(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftAssignment interface{}, mods queries.Applicator) error {
	var slice []*ShiftAssignment
	var object *ShiftAssignment

	if singular {
		var ok bool
		object, ok = maybeShiftAssignment.(*ShiftAssignment)
		if !ok {
			object = new(ShiftAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftAssignment))
			}
		}
	} else {
		s, ok := maybeShiftAssignment.(*[]*ShiftAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftAssignmentR{}
		}
		args = append(args, object.ShiftSlotID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftAssignmentR{}
			}

			for _, a := range args {
				if a == obj.ShiftSlotID {
					continue Outer
				}
			}

			args = append(args, obj.ShiftSlotID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shift_slots`),
		qm.WhereIn(`shift_slots.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShiftSlot")
	}

	var resultSlice []*ShiftSlot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShiftSlot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shift_slots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shift_slots")
	}

	if len(shiftSlotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShiftSlot = foreign
		if foreign.R == nil {
			foreign.R = &shiftSlotR{}
		}
		foreign.R.ShiftAssignments = append(foreign.R.ShiftAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShiftSlotID == foreign.ID {
				local.R.ShiftSlot = foreign
				if foreign.R == nil {
					foreign.R = &shiftSlotR{}
				}
				foreign.R.ShiftAssignments = append(foreign.R.ShiftAssignments, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedByCoopEventG of the shiftAssignment to the related item.
// Sets o.R.CreatedByCoopEvent to related.
// Adds o to related.R.CreatedByShiftAssignments.
// Uses the global database handle.
func (o *ShiftAssignment) SetCreatedByCoopEventG(ctx context.Context, insert bool, related *CoopEvent) error {
	return o.SetCreatedByCoopEvent(ctx, boil.GetContextDB(), insert, related)
}

// SetCreatedByCoopEvent of the shiftAssignment to the related item.
// Sets o.R.CreatedByCoopEvent to related.
// Adds o to related.R.CreatedByShiftAssignments.
func (o *ShiftAssignment) SetCreatedByCoopEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CoopEvent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shift_assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, shiftAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MemberID, o.ShiftID, o.ShiftSlotID, o.OrganizationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedBy = related.ID
	if o.R == nil {
		o.R = &shiftAssignmentR{
			CreatedByCoopEvent: related,
		}
	} else {
		o.R.CreatedByCoopEvent = related
	}

	if related.R == nil {
		related.R = &coopEventR{
			CreatedByShiftAssignments: ShiftAssignmentSlice{o},
		}
	} else {
		related.R.CreatedByShiftAssignments = append(related.R.CreatedByShiftAssignments, o)
	}

	return nil
}

// SetMemberG of the shiftAssignment to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.ShiftAssignments.
// Uses the global database handle.
func (o *ShiftAssignment) SetMemberG(ctx context.Context, insert bool, related *Member) error {
	return o.SetMember(ctx, boil.GetContextDB(), insert, related)
}

// SetMember of the shiftAssignment to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.ShiftAssignments.
func (o *ShiftAssignment) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shift_assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"member_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MemberID, o.ShiftID, o.ShiftSlotID, o.OrganizationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.ID
	if o.R == nil {
		o.R = &shiftAssignmentR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &memberR{
			ShiftAssignments: ShiftAssignmentSlice{o},
		}
	} else {
		related.R.ShiftAssignments = append(related.R.ShiftAssignments, o)
	}

	return nil
}

// SetOrganizationG of the shiftAssignment to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.ShiftAssignments.
// Uses the global database handle.
func (o *ShiftAssignment) SetOrganizationG(ctx context.Context, insert bool, related *Organization) error {
	return o.SetOrganization(ctx, boil.GetContextDB(), insert, related)
}

// SetOrganization of the shiftAssignment to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.ShiftAssignments.
func (o *ShiftAssignment) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shift_assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MemberID, o.ShiftID, o.ShiftSlotID, o.OrganizationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &shiftAssignmentR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			ShiftAssignments: ShiftAssignmentSlice{o},
		}
	} else {
		related.R.ShiftAssignments = append(related.R.ShiftAssignments, o)
	}

	return nil
}

// SetShiftG of the shiftAssignment to the related item.
// Sets o.R.Shift to related.
// Adds o to related.R.ShiftAssignments.
// Uses the global database handle.
func (o *ShiftAssignment) SetShiftG(ctx context.Context, insert bool, related *Shift) error {
	return o.SetShift(ctx, boil.GetContextDB(), insert, related)
}

// SetShift of the shiftAssignment to the related item.
// Sets o.R.Shift to related.
// Adds o to related.R.ShiftAssignments.
func (o *ShiftAssignment) SetShift(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Shift) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shift_assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shift_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MemberID, o.ShiftID, o.ShiftSlotID, o.OrganizationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShiftID = related.ID
	if o.R == nil {
		o.R = &shiftAssignmentR{
			Shift: related,
		}
	} else {
		o.R.Shift = related
	}

	if related.R == nil {
		related.R = &shiftR{
			ShiftAssignments: ShiftAssignmentSlice{o},
		}
	} else {
		related.R.ShiftAssignments = append(related.R.ShiftAssignments, o)
	}

	return nil
}

// SetShiftSlotG of the shiftAssignment to the related item.
// Sets o.R.ShiftSlot to related.
// Adds o to related.R.ShiftAssignments.
// Uses the global database handle.
func (o *ShiftAssignment) SetShiftSlotG(ctx context.Context, insert bool, related *ShiftSlot) error {
	return o.SetShiftSlot(ctx, boil.GetContextDB(), insert, related)
}

// SetShiftSlot of the shiftAssignment to the related item.
// Sets o.R.ShiftSlot to related.
// Adds o to related.R.ShiftAssignments.
func (o *ShiftAssignment) SetShiftSlot(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShiftSlot) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shift_assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shift_slot_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MemberID, o.ShiftID, o.ShiftSlotID, o.OrganizationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShiftSlotID = related.ID
	if o.R == nil {
		o.R = &shiftAssignmentR{
			ShiftSlot: related,
		}
	} else {
		o.R.ShiftSlot = related
	}

	if related.R == nil {
		related.R = &shiftSlotR{
			ShiftAssignments: ShiftAssignmentSlice{o},
		}
	} else {
		related.R.ShiftAssignments = append(related.R.ShiftAssignments, o)
	}

	return nil
}

// ShiftAssignments retrieves all the records using an executor.
func ShiftAssignments(mods ...qm.QueryMod) shiftAssignmentQuery {
	mods = append(mods, qm.From("\"shift_assignments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shift_assignments\".*"})
	}

	return shiftAssignmentQuery{q}
}

// FindShiftAssignmentG retrieves a single record by ID.
func FindShiftAssignmentG(ctx context.Context, memberID string, shiftID string, shiftSlotID string, organizationID string, selectCols ...string) (*ShiftAssignment, error) {
	return FindShiftAssignment(ctx, boil.GetContextDB(), memberID, shiftID, shiftSlotID, organizationID, selectCols...)
}

// FindShiftAssignment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShiftAssignment(ctx context.Context, exec boil.ContextExecutor, memberID string, shiftID string, shiftSlotID string, organizationID string, selectCols ...string) (*ShiftAssignment, error) {
	shiftAssignmentObj := &ShiftAssignment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shift_assignments\" where \"member_id\"=$1 AND \"shift_id\"=$2 AND \"shift_slot_id\"=$3 AND \"organization_id\"=$4", sel,
	)

	q := queries.Raw(query, memberID, shiftID, shiftSlotID, organizationID)

	err := q.Bind(ctx, exec, shiftAssignmentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shift_assignments")
	}

	if err = shiftAssignmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shiftAssignmentObj, err
	}

	return shiftAssignmentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ShiftAssignment) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShiftAssignment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shift_assignments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftAssignmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shiftAssignmentInsertCacheMut.RLock()
	cache, cached := shiftAssignmentInsertCache[key]
	shiftAssignmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shiftAssignmentAllColumns,
			shiftAssignmentColumnsWithDefault,
			shiftAssignmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shiftAssignmentType, shiftAssignmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shiftAssignmentType, shiftAssignmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shift_assignments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shift_assignments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shift_assignments")
	}

	if !cached {
		shiftAssignmentInsertCacheMut.Lock()
		shiftAssignmentInsertCache[key] = cache
		shiftAssignmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ShiftAssignment record using the global executor.
// See Update for more documentation.
func (o *ShiftAssignment) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ShiftAssignment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShiftAssignment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shiftAssignmentUpdateCacheMut.RLock()
	cache, cached := shiftAssignmentUpdateCache[key]
	shiftAssignmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shiftAssignmentAllColumns,
			shiftAssignmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shift_assignments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shift_assignments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shiftAssignmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shiftAssignmentType, shiftAssignmentMapping, append(wl, shiftAssignmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shift_assignments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shift_assignments")
	}

	if !cached {
		shiftAssignmentUpdateCacheMut.Lock()
		shiftAssignmentUpdateCache[key] = cache
		shiftAssignmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q shiftAssignmentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q shiftAssignmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shift_assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shift_assignments")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ShiftAssignmentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShiftAssignmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shift_assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shiftAssignmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shiftAssignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shiftAssignment")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ShiftAssignment) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShiftAssignment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shift_assignments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftAssignmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shiftAssignmentUpsertCacheMut.RLock()
	cache, cached := shiftAssignmentUpsertCache[key]
	shiftAssignmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shiftAssignmentAllColumns,
			shiftAssignmentColumnsWithDefault,
			shiftAssignmentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shiftAssignmentAllColumns,
			shiftAssignmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shift_assignments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shiftAssignmentPrimaryKeyColumns))
			copy(conflict, shiftAssignmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shift_assignments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shiftAssignmentType, shiftAssignmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shiftAssignmentType, shiftAssignmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shift_assignments")
	}

	if !cached {
		shiftAssignmentUpsertCacheMut.Lock()
		shiftAssignmentUpsertCache[key] = cache
		shiftAssignmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ShiftAssignment record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ShiftAssignment) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ShiftAssignment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShiftAssignment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShiftAssignment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shiftAssignmentPrimaryKeyMapping)
	sql := "DELETE FROM \"shift_assignments\" WHERE \"member_id\"=$1 AND \"shift_id\"=$2 AND \"shift_slot_id\"=$3 AND \"organization_id\"=$4"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shift_assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shift_assignments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q shiftAssignmentQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q shiftAssignmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shiftAssignmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shift_assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shift_assignments")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ShiftAssignmentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShiftAssignmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shiftAssignmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shift_assignments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftAssignmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shiftAssignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shift_assignments")
	}

	if len(shiftAssignmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ShiftAssignment) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ShiftAssignment provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShiftAssignment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShiftAssignment(ctx, exec, o.MemberID, o.ShiftID, o.ShiftSlotID, o.OrganizationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShiftAssignmentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ShiftAssignmentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShiftAssignmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShiftAssignmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shift_assignments\".* FROM \"shift_assignments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftAssignmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShiftAssignmentSlice")
	}

	*o = slice

	return nil
}

// ShiftAssignmentExistsG checks if the ShiftAssignment row exists.
func ShiftAssignmentExistsG(ctx context.Context, memberID string, shiftID string, shiftSlotID string, organizationID string) (bool, error) {
	return ShiftAssignmentExists(ctx, boil.GetContextDB(), memberID, shiftID, shiftSlotID, organizationID)
}

// ShiftAssignmentExists checks if the ShiftAssignment row exists.
func ShiftAssignmentExists(ctx context.Context, exec boil.ContextExecutor, memberID string, shiftID string, shiftSlotID string, organizationID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shift_assignments\" where \"member_id\"=$1 AND \"shift_id\"=$2 AND \"shift_slot_id\"=$3 AND \"organization_id\"=$4 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, memberID, shiftID, shiftSlotID, organizationID)
	}
	row := exec.QueryRowContext(ctx, sql, memberID, shiftID, shiftSlotID, organizationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shift_assignments exists")
	}

	return exists, nil
}

// Exists checks if the ShiftAssignment row exists.
func (o *ShiftAssignment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShiftAssignmentExists(ctx, exec, o.MemberID, o.ShiftID, o.ShiftSlotID, o.OrganizationID)
}
