// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMembershipTypes(t *testing.T) {
	t.Parallel()

	query := MembershipTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMembershipTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MembershipTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMembershipTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MembershipTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MembershipTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMembershipTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MembershipTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MembershipTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMembershipTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MembershipTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MembershipType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MembershipTypeExists to return true, but got false.")
	}
}

func testMembershipTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	membershipTypeFound, err := FindMembershipType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if membershipTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMembershipTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MembershipTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMembershipTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MembershipTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMembershipTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	membershipTypeOne := &MembershipType{}
	membershipTypeTwo := &MembershipType{}
	if err = randomize.Struct(seed, membershipTypeOne, membershipTypeDBTypes, false, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}
	if err = randomize.Struct(seed, membershipTypeTwo, membershipTypeDBTypes, false, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = membershipTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = membershipTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MembershipTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMembershipTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	membershipTypeOne := &MembershipType{}
	membershipTypeTwo := &MembershipType{}
	if err = randomize.Struct(seed, membershipTypeOne, membershipTypeDBTypes, false, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}
	if err = randomize.Struct(seed, membershipTypeTwo, membershipTypeDBTypes, false, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = membershipTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = membershipTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MembershipTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func membershipTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MembershipType) error {
	*o = MembershipType{}
	return nil
}

func membershipTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MembershipType) error {
	*o = MembershipType{}
	return nil
}

func membershipTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MembershipType) error {
	*o = MembershipType{}
	return nil
}

func membershipTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MembershipType) error {
	*o = MembershipType{}
	return nil
}

func membershipTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MembershipType) error {
	*o = MembershipType{}
	return nil
}

func membershipTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MembershipType) error {
	*o = MembershipType{}
	return nil
}

func membershipTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MembershipType) error {
	*o = MembershipType{}
	return nil
}

func membershipTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MembershipType) error {
	*o = MembershipType{}
	return nil
}

func membershipTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MembershipType) error {
	*o = MembershipType{}
	return nil
}

func testMembershipTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MembershipType{}
	o := &MembershipType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MembershipType object: %s", err)
	}

	AddMembershipTypeHook(boil.BeforeInsertHook, membershipTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	membershipTypeBeforeInsertHooks = []MembershipTypeHook{}

	AddMembershipTypeHook(boil.AfterInsertHook, membershipTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	membershipTypeAfterInsertHooks = []MembershipTypeHook{}

	AddMembershipTypeHook(boil.AfterSelectHook, membershipTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	membershipTypeAfterSelectHooks = []MembershipTypeHook{}

	AddMembershipTypeHook(boil.BeforeUpdateHook, membershipTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	membershipTypeBeforeUpdateHooks = []MembershipTypeHook{}

	AddMembershipTypeHook(boil.AfterUpdateHook, membershipTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	membershipTypeAfterUpdateHooks = []MembershipTypeHook{}

	AddMembershipTypeHook(boil.BeforeDeleteHook, membershipTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	membershipTypeBeforeDeleteHooks = []MembershipTypeHook{}

	AddMembershipTypeHook(boil.AfterDeleteHook, membershipTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	membershipTypeAfterDeleteHooks = []MembershipTypeHook{}

	AddMembershipTypeHook(boil.BeforeUpsertHook, membershipTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	membershipTypeBeforeUpsertHooks = []MembershipTypeHook{}

	AddMembershipTypeHook(boil.AfterUpsertHook, membershipTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	membershipTypeAfterUpsertHooks = []MembershipTypeHook{}
}

func testMembershipTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MembershipTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMembershipTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(membershipTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MembershipTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMembershipTypeToManyMemberships(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MembershipType
	var b, c Membership

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, membershipDBTypes, false, membershipColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, membershipDBTypes, false, membershipColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MembershipTypeID = a.ID
	c.MembershipTypeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Memberships().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MembershipTypeID == b.MembershipTypeID {
			bFound = true
		}
		if v.MembershipTypeID == c.MembershipTypeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MembershipTypeSlice{&a}
	if err = a.L.LoadMemberships(ctx, tx, false, (*[]*MembershipType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Memberships); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Memberships = nil
	if err = a.L.LoadMemberships(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Memberships); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMembershipTypeToManyAddOpMemberships(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MembershipType
	var b, c, d, e Membership

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, membershipTypeDBTypes, false, strmangle.SetComplement(membershipTypePrimaryKeyColumns, membershipTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Membership{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, membershipDBTypes, false, strmangle.SetComplement(membershipPrimaryKeyColumns, membershipColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Membership{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMemberships(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MembershipTypeID {
			t.Error("foreign key was wrong value", a.ID, first.MembershipTypeID)
		}
		if a.ID != second.MembershipTypeID {
			t.Error("foreign key was wrong value", a.ID, second.MembershipTypeID)
		}

		if first.R.MembershipType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MembershipType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Memberships[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Memberships[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Memberships().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMembershipTypeToOneOrganizationUsingOrganization(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MembershipType
	var foreign Organization

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, membershipTypeDBTypes, false, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrganizationID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Organization().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrganizationHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MembershipTypeSlice{&local}
	if err = local.L.LoadOrganization(ctx, tx, false, (*[]*MembershipType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Organization == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Organization = nil
	if err = local.L.LoadOrganization(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Organization == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMembershipTypeToOneSetOpOrganizationUsingOrganization(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MembershipType
	var b, c Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, membershipTypeDBTypes, false, strmangle.SetComplement(membershipTypePrimaryKeyColumns, membershipTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Organization{&b, &c} {
		err = a.SetOrganization(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Organization != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MembershipTypes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrganizationID != x.ID {
			t.Error("foreign key was wrong value", a.OrganizationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrganizationID))
		reflect.Indirect(reflect.ValueOf(&a.OrganizationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrganizationID != x.ID {
			t.Error("foreign key was wrong value", a.OrganizationID, x.ID)
		}
	}
}

func testMembershipTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMembershipTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MembershipTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMembershipTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MembershipTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	membershipTypeDBTypes = map[string]string{`ID`: `uuid`, `OrganizationID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `Name`: `text`, `Data`: `jsonb`}
	_                     = bytes.MinRead
)

func testMembershipTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(membershipTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(membershipTypeAllColumns) == len(membershipTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MembershipTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMembershipTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(membershipTypeAllColumns) == len(membershipTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MembershipType{}
	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MembershipTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, membershipTypeDBTypes, true, membershipTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(membershipTypeAllColumns, membershipTypePrimaryKeyColumns) {
		fields = membershipTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			membershipTypeAllColumns,
			membershipTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MembershipTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMembershipTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(membershipTypeAllColumns) == len(membershipTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MembershipType{}
	if err = randomize.Struct(seed, &o, membershipTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MembershipType: %s", err)
	}

	count, err := MembershipTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, membershipTypeDBTypes, false, membershipTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MembershipType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MembershipType: %s", err)
	}

	count, err = MembershipTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
