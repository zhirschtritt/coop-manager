// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Membership is an object representing the database table.
type Membership struct {
	MemberID         string    `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	MembershipTypeID string    `boil:"membership_type_id" json:"membership_type_id" toml:"membership_type_id" yaml:"membership_type_id"`
	OrganizationID   string    `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	CreatedBy        string    `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	StartDate        time.Time `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate          time.Time `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`
	Status           string    `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *membershipR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L membershipL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MembershipColumns = struct {
	MemberID         string
	MembershipTypeID string
	OrganizationID   string
	CreatedBy        string
	StartDate        string
	EndDate          string
	Status           string
}{
	MemberID:         "member_id",
	MembershipTypeID: "membership_type_id",
	OrganizationID:   "organization_id",
	CreatedBy:        "created_by",
	StartDate:        "start_date",
	EndDate:          "end_date",
	Status:           "status",
}

var MembershipTableColumns = struct {
	MemberID         string
	MembershipTypeID string
	OrganizationID   string
	CreatedBy        string
	StartDate        string
	EndDate          string
	Status           string
}{
	MemberID:         "memberships.member_id",
	MembershipTypeID: "memberships.membership_type_id",
	OrganizationID:   "memberships.organization_id",
	CreatedBy:        "memberships.created_by",
	StartDate:        "memberships.start_date",
	EndDate:          "memberships.end_date",
	Status:           "memberships.status",
}

// Generated where

var MembershipWhere = struct {
	MemberID         whereHelperstring
	MembershipTypeID whereHelperstring
	OrganizationID   whereHelperstring
	CreatedBy        whereHelperstring
	StartDate        whereHelpertime_Time
	EndDate          whereHelpertime_Time
	Status           whereHelperstring
}{
	MemberID:         whereHelperstring{field: "\"memberships\".\"member_id\""},
	MembershipTypeID: whereHelperstring{field: "\"memberships\".\"membership_type_id\""},
	OrganizationID:   whereHelperstring{field: "\"memberships\".\"organization_id\""},
	CreatedBy:        whereHelperstring{field: "\"memberships\".\"created_by\""},
	StartDate:        whereHelpertime_Time{field: "\"memberships\".\"start_date\""},
	EndDate:          whereHelpertime_Time{field: "\"memberships\".\"end_date\""},
	Status:           whereHelperstring{field: "\"memberships\".\"status\""},
}

// MembershipRels is where relationship names are stored.
var MembershipRels = struct {
	CreatedByCoopEvent string
	Member             string
	MembershipType     string
	Organization       string
}{
	CreatedByCoopEvent: "CreatedByCoopEvent",
	Member:             "Member",
	MembershipType:     "MembershipType",
	Organization:       "Organization",
}

// membershipR is where relationships are stored.
type membershipR struct {
	CreatedByCoopEvent *CoopEvent      `boil:"CreatedByCoopEvent" json:"CreatedByCoopEvent" toml:"CreatedByCoopEvent" yaml:"CreatedByCoopEvent"`
	Member             *Member         `boil:"Member" json:"Member" toml:"Member" yaml:"Member"`
	MembershipType     *MembershipType `boil:"MembershipType" json:"MembershipType" toml:"MembershipType" yaml:"MembershipType"`
	Organization       *Organization   `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
}

// NewStruct creates a new relationship struct
func (*membershipR) NewStruct() *membershipR {
	return &membershipR{}
}

func (r *membershipR) GetCreatedByCoopEvent() *CoopEvent {
	if r == nil {
		return nil
	}
	return r.CreatedByCoopEvent
}

func (r *membershipR) GetMember() *Member {
	if r == nil {
		return nil
	}
	return r.Member
}

func (r *membershipR) GetMembershipType() *MembershipType {
	if r == nil {
		return nil
	}
	return r.MembershipType
}

func (r *membershipR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

// membershipL is where Load methods for each relationship are stored.
type membershipL struct{}

var (
	membershipAllColumns            = []string{"member_id", "membership_type_id", "organization_id", "created_by", "start_date", "end_date", "status"}
	membershipColumnsWithoutDefault = []string{"member_id", "membership_type_id", "organization_id", "created_by", "start_date", "end_date", "status"}
	membershipColumnsWithDefault    = []string{}
	membershipPrimaryKeyColumns     = []string{"member_id", "organization_id", "created_by"}
	membershipGeneratedColumns      = []string{}
)

type (
	// MembershipSlice is an alias for a slice of pointers to Membership.
	// This should almost always be used instead of []Membership.
	MembershipSlice []*Membership
	// MembershipHook is the signature for custom Membership hook methods
	MembershipHook func(context.Context, boil.ContextExecutor, *Membership) error

	membershipQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	membershipType                 = reflect.TypeOf(&Membership{})
	membershipMapping              = queries.MakeStructMapping(membershipType)
	membershipPrimaryKeyMapping, _ = queries.BindMapping(membershipType, membershipMapping, membershipPrimaryKeyColumns)
	membershipInsertCacheMut       sync.RWMutex
	membershipInsertCache          = make(map[string]insertCache)
	membershipUpdateCacheMut       sync.RWMutex
	membershipUpdateCache          = make(map[string]updateCache)
	membershipUpsertCacheMut       sync.RWMutex
	membershipUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var membershipAfterSelectHooks []MembershipHook

var membershipBeforeInsertHooks []MembershipHook
var membershipAfterInsertHooks []MembershipHook

var membershipBeforeUpdateHooks []MembershipHook
var membershipAfterUpdateHooks []MembershipHook

var membershipBeforeDeleteHooks []MembershipHook
var membershipAfterDeleteHooks []MembershipHook

var membershipBeforeUpsertHooks []MembershipHook
var membershipAfterUpsertHooks []MembershipHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Membership) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range membershipAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Membership) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range membershipBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Membership) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range membershipAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Membership) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range membershipBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Membership) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range membershipAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Membership) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range membershipBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Membership) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range membershipAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Membership) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range membershipBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Membership) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range membershipAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMembershipHook registers your hook function for all future operations.
func AddMembershipHook(hookPoint boil.HookPoint, membershipHook MembershipHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		membershipAfterSelectHooks = append(membershipAfterSelectHooks, membershipHook)
	case boil.BeforeInsertHook:
		membershipBeforeInsertHooks = append(membershipBeforeInsertHooks, membershipHook)
	case boil.AfterInsertHook:
		membershipAfterInsertHooks = append(membershipAfterInsertHooks, membershipHook)
	case boil.BeforeUpdateHook:
		membershipBeforeUpdateHooks = append(membershipBeforeUpdateHooks, membershipHook)
	case boil.AfterUpdateHook:
		membershipAfterUpdateHooks = append(membershipAfterUpdateHooks, membershipHook)
	case boil.BeforeDeleteHook:
		membershipBeforeDeleteHooks = append(membershipBeforeDeleteHooks, membershipHook)
	case boil.AfterDeleteHook:
		membershipAfterDeleteHooks = append(membershipAfterDeleteHooks, membershipHook)
	case boil.BeforeUpsertHook:
		membershipBeforeUpsertHooks = append(membershipBeforeUpsertHooks, membershipHook)
	case boil.AfterUpsertHook:
		membershipAfterUpsertHooks = append(membershipAfterUpsertHooks, membershipHook)
	}
}

// OneG returns a single membership record from the query using the global executor.
func (q membershipQuery) OneG(ctx context.Context) (*Membership, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single membership record from the query.
func (q membershipQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Membership, error) {
	o := &Membership{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for memberships")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Membership records from the query using the global executor.
func (q membershipQuery) AllG(ctx context.Context) (MembershipSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Membership records from the query.
func (q membershipQuery) All(ctx context.Context, exec boil.ContextExecutor) (MembershipSlice, error) {
	var o []*Membership

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Membership slice")
	}

	if len(membershipAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Membership records in the query using the global executor
func (q membershipQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Membership records in the query.
func (q membershipQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count memberships rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q membershipQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q membershipQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if memberships exists")
	}

	return count > 0, nil
}

// CreatedByCoopEvent pointed to by the foreign key.
func (o *Membership) CreatedByCoopEvent(mods ...qm.QueryMod) coopEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return CoopEvents(queryMods...)
}

// Member pointed to by the foreign key.
func (o *Membership) Member(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// MembershipType pointed to by the foreign key.
func (o *Membership) MembershipType(mods ...qm.QueryMod) membershipTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MembershipTypeID),
	}

	queryMods = append(queryMods, mods...)

	return MembershipTypes(queryMods...)
}

// Organization pointed to by the foreign key.
func (o *Membership) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// LoadCreatedByCoopEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (membershipL) LoadCreatedByCoopEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMembership interface{}, mods queries.Applicator) error {
	var slice []*Membership
	var object *Membership

	if singular {
		var ok bool
		object, ok = maybeMembership.(*Membership)
		if !ok {
			object = new(Membership)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMembership))
			}
		}
	} else {
		s, ok := maybeMembership.(*[]*Membership)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMembership))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &membershipR{}
		}
		args = append(args, object.CreatedBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &membershipR{}
			}

			for _, a := range args {
				if a == obj.CreatedBy {
					continue Outer
				}
			}

			args = append(args, obj.CreatedBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coop_events`),
		qm.WhereIn(`coop_events.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CoopEvent")
	}

	var resultSlice []*CoopEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CoopEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for coop_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coop_events")
	}

	if len(coopEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByCoopEvent = foreign
		if foreign.R == nil {
			foreign.R = &coopEventR{}
		}
		foreign.R.CreatedByMemberships = append(foreign.R.CreatedByMemberships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedBy == foreign.ID {
				local.R.CreatedByCoopEvent = foreign
				if foreign.R == nil {
					foreign.R = &coopEventR{}
				}
				foreign.R.CreatedByMemberships = append(foreign.R.CreatedByMemberships, local)
				break
			}
		}
	}

	return nil
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (membershipL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMembership interface{}, mods queries.Applicator) error {
	var slice []*Membership
	var object *Membership

	if singular {
		var ok bool
		object, ok = maybeMembership.(*Membership)
		if !ok {
			object = new(Membership)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMembership))
			}
		}
	} else {
		s, ok := maybeMembership.(*[]*Membership)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMembership))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &membershipR{}
		}
		args = append(args, object.MemberID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &membershipR{}
			}

			for _, a := range args {
				if a == obj.MemberID {
					continue Outer
				}
			}

			args = append(args, obj.MemberID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`members`),
		qm.WhereIn(`members.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for members")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.Memberships = append(foreign.R.Memberships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.ID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.Memberships = append(foreign.R.Memberships, local)
				break
			}
		}
	}

	return nil
}

// LoadMembershipType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (membershipL) LoadMembershipType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMembership interface{}, mods queries.Applicator) error {
	var slice []*Membership
	var object *Membership

	if singular {
		var ok bool
		object, ok = maybeMembership.(*Membership)
		if !ok {
			object = new(Membership)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMembership))
			}
		}
	} else {
		s, ok := maybeMembership.(*[]*Membership)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMembership))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &membershipR{}
		}
		args = append(args, object.MembershipTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &membershipR{}
			}

			for _, a := range args {
				if a == obj.MembershipTypeID {
					continue Outer
				}
			}

			args = append(args, obj.MembershipTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`membership_types`),
		qm.WhereIn(`membership_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MembershipType")
	}

	var resultSlice []*MembershipType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MembershipType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for membership_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for membership_types")
	}

	if len(membershipTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MembershipType = foreign
		if foreign.R == nil {
			foreign.R = &membershipTypeR{}
		}
		foreign.R.Memberships = append(foreign.R.Memberships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MembershipTypeID == foreign.ID {
				local.R.MembershipType = foreign
				if foreign.R == nil {
					foreign.R = &membershipTypeR{}
				}
				foreign.R.Memberships = append(foreign.R.Memberships, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (membershipL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMembership interface{}, mods queries.Applicator) error {
	var slice []*Membership
	var object *Membership

	if singular {
		var ok bool
		object, ok = maybeMembership.(*Membership)
		if !ok {
			object = new(Membership)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMembership))
			}
		}
	} else {
		s, ok := maybeMembership.(*[]*Membership)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMembership))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &membershipR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &membershipR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.Memberships = append(foreign.R.Memberships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Memberships = append(foreign.R.Memberships, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedByCoopEventG of the membership to the related item.
// Sets o.R.CreatedByCoopEvent to related.
// Adds o to related.R.CreatedByMemberships.
// Uses the global database handle.
func (o *Membership) SetCreatedByCoopEventG(ctx context.Context, insert bool, related *CoopEvent) error {
	return o.SetCreatedByCoopEvent(ctx, boil.GetContextDB(), insert, related)
}

// SetCreatedByCoopEvent of the membership to the related item.
// Sets o.R.CreatedByCoopEvent to related.
// Adds o to related.R.CreatedByMemberships.
func (o *Membership) SetCreatedByCoopEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CoopEvent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"memberships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, membershipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MemberID, o.OrganizationID, o.CreatedBy}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedBy = related.ID
	if o.R == nil {
		o.R = &membershipR{
			CreatedByCoopEvent: related,
		}
	} else {
		o.R.CreatedByCoopEvent = related
	}

	if related.R == nil {
		related.R = &coopEventR{
			CreatedByMemberships: MembershipSlice{o},
		}
	} else {
		related.R.CreatedByMemberships = append(related.R.CreatedByMemberships, o)
	}

	return nil
}

// SetMemberG of the membership to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.Memberships.
// Uses the global database handle.
func (o *Membership) SetMemberG(ctx context.Context, insert bool, related *Member) error {
	return o.SetMember(ctx, boil.GetContextDB(), insert, related)
}

// SetMember of the membership to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.Memberships.
func (o *Membership) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"memberships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"member_id"}),
		strmangle.WhereClause("\"", "\"", 2, membershipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MemberID, o.OrganizationID, o.CreatedBy}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.ID
	if o.R == nil {
		o.R = &membershipR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &memberR{
			Memberships: MembershipSlice{o},
		}
	} else {
		related.R.Memberships = append(related.R.Memberships, o)
	}

	return nil
}

// SetMembershipTypeG of the membership to the related item.
// Sets o.R.MembershipType to related.
// Adds o to related.R.Memberships.
// Uses the global database handle.
func (o *Membership) SetMembershipTypeG(ctx context.Context, insert bool, related *MembershipType) error {
	return o.SetMembershipType(ctx, boil.GetContextDB(), insert, related)
}

// SetMembershipType of the membership to the related item.
// Sets o.R.MembershipType to related.
// Adds o to related.R.Memberships.
func (o *Membership) SetMembershipType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MembershipType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"memberships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"membership_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, membershipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MemberID, o.OrganizationID, o.CreatedBy}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MembershipTypeID = related.ID
	if o.R == nil {
		o.R = &membershipR{
			MembershipType: related,
		}
	} else {
		o.R.MembershipType = related
	}

	if related.R == nil {
		related.R = &membershipTypeR{
			Memberships: MembershipSlice{o},
		}
	} else {
		related.R.Memberships = append(related.R.Memberships, o)
	}

	return nil
}

// SetOrganizationG of the membership to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Memberships.
// Uses the global database handle.
func (o *Membership) SetOrganizationG(ctx context.Context, insert bool, related *Organization) error {
	return o.SetOrganization(ctx, boil.GetContextDB(), insert, related)
}

// SetOrganization of the membership to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Memberships.
func (o *Membership) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"memberships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, membershipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MemberID, o.OrganizationID, o.CreatedBy}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &membershipR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			Memberships: MembershipSlice{o},
		}
	} else {
		related.R.Memberships = append(related.R.Memberships, o)
	}

	return nil
}

// Memberships retrieves all the records using an executor.
func Memberships(mods ...qm.QueryMod) membershipQuery {
	mods = append(mods, qm.From("\"memberships\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"memberships\".*"})
	}

	return membershipQuery{q}
}

// FindMembershipG retrieves a single record by ID.
func FindMembershipG(ctx context.Context, memberID string, organizationID string, createdBy string, selectCols ...string) (*Membership, error) {
	return FindMembership(ctx, boil.GetContextDB(), memberID, organizationID, createdBy, selectCols...)
}

// FindMembership retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMembership(ctx context.Context, exec boil.ContextExecutor, memberID string, organizationID string, createdBy string, selectCols ...string) (*Membership, error) {
	membershipObj := &Membership{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"memberships\" where \"member_id\"=$1 AND \"organization_id\"=$2 AND \"created_by\"=$3", sel,
	)

	q := queries.Raw(query, memberID, organizationID, createdBy)

	err := q.Bind(ctx, exec, membershipObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from memberships")
	}

	if err = membershipObj.doAfterSelectHooks(ctx, exec); err != nil {
		return membershipObj, err
	}

	return membershipObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Membership) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Membership) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no memberships provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(membershipColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	membershipInsertCacheMut.RLock()
	cache, cached := membershipInsertCache[key]
	membershipInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			membershipAllColumns,
			membershipColumnsWithDefault,
			membershipColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(membershipType, membershipMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(membershipType, membershipMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"memberships\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"memberships\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into memberships")
	}

	if !cached {
		membershipInsertCacheMut.Lock()
		membershipInsertCache[key] = cache
		membershipInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Membership record using the global executor.
// See Update for more documentation.
func (o *Membership) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Membership.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Membership) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	membershipUpdateCacheMut.RLock()
	cache, cached := membershipUpdateCache[key]
	membershipUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			membershipAllColumns,
			membershipPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update memberships, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"memberships\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, membershipPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(membershipType, membershipMapping, append(wl, membershipPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update memberships row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for memberships")
	}

	if !cached {
		membershipUpdateCacheMut.Lock()
		membershipUpdateCache[key] = cache
		membershipUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q membershipQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q membershipQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for memberships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for memberships")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MembershipSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MembershipSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), membershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"memberships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, membershipPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in membership slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all membership")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Membership) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Membership) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no memberships provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(membershipColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	membershipUpsertCacheMut.RLock()
	cache, cached := membershipUpsertCache[key]
	membershipUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			membershipAllColumns,
			membershipColumnsWithDefault,
			membershipColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			membershipAllColumns,
			membershipPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert memberships, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(membershipPrimaryKeyColumns))
			copy(conflict, membershipPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"memberships\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(membershipType, membershipMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(membershipType, membershipMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert memberships")
	}

	if !cached {
		membershipUpsertCacheMut.Lock()
		membershipUpsertCache[key] = cache
		membershipUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Membership record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Membership) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Membership record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Membership) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Membership provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), membershipPrimaryKeyMapping)
	sql := "DELETE FROM \"memberships\" WHERE \"member_id\"=$1 AND \"organization_id\"=$2 AND \"created_by\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from memberships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for memberships")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q membershipQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q membershipQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no membershipQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from memberships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for memberships")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MembershipSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MembershipSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(membershipBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), membershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"memberships\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, membershipPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from membership slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for memberships")
	}

	if len(membershipAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Membership) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Membership provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Membership) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMembership(ctx, exec, o.MemberID, o.OrganizationID, o.CreatedBy)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MembershipSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MembershipSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MembershipSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MembershipSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), membershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"memberships\".* FROM \"memberships\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, membershipPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MembershipSlice")
	}

	*o = slice

	return nil
}

// MembershipExistsG checks if the Membership row exists.
func MembershipExistsG(ctx context.Context, memberID string, organizationID string, createdBy string) (bool, error) {
	return MembershipExists(ctx, boil.GetContextDB(), memberID, organizationID, createdBy)
}

// MembershipExists checks if the Membership row exists.
func MembershipExists(ctx context.Context, exec boil.ContextExecutor, memberID string, organizationID string, createdBy string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"memberships\" where \"member_id\"=$1 AND \"organization_id\"=$2 AND \"created_by\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, memberID, organizationID, createdBy)
	}
	row := exec.QueryRowContext(ctx, sql, memberID, organizationID, createdBy)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if memberships exists")
	}

	return exists, nil
}

// Exists checks if the Membership row exists.
func (o *Membership) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MembershipExists(ctx, exec, o.MemberID, o.OrganizationID, o.CreatedBy)
}
