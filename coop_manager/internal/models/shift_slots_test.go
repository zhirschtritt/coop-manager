// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShiftSlots(t *testing.T) {
	t.Parallel()

	query := ShiftSlots()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShiftSlotsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShiftSlots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShiftSlotsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShiftSlots().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShiftSlots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShiftSlotsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShiftSlotSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShiftSlots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShiftSlotsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShiftSlotExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShiftSlot exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShiftSlotExists to return true, but got false.")
	}
}

func testShiftSlotsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shiftSlotFound, err := FindShiftSlot(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shiftSlotFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShiftSlotsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShiftSlots().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShiftSlotsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShiftSlots().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShiftSlotsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shiftSlotOne := &ShiftSlot{}
	shiftSlotTwo := &ShiftSlot{}
	if err = randomize.Struct(seed, shiftSlotOne, shiftSlotDBTypes, false, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}
	if err = randomize.Struct(seed, shiftSlotTwo, shiftSlotDBTypes, false, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shiftSlotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shiftSlotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShiftSlots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShiftSlotsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shiftSlotOne := &ShiftSlot{}
	shiftSlotTwo := &ShiftSlot{}
	if err = randomize.Struct(seed, shiftSlotOne, shiftSlotDBTypes, false, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}
	if err = randomize.Struct(seed, shiftSlotTwo, shiftSlotDBTypes, false, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shiftSlotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shiftSlotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShiftSlots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shiftSlotBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShiftSlot) error {
	*o = ShiftSlot{}
	return nil
}

func shiftSlotAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShiftSlot) error {
	*o = ShiftSlot{}
	return nil
}

func shiftSlotAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShiftSlot) error {
	*o = ShiftSlot{}
	return nil
}

func shiftSlotBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShiftSlot) error {
	*o = ShiftSlot{}
	return nil
}

func shiftSlotAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShiftSlot) error {
	*o = ShiftSlot{}
	return nil
}

func shiftSlotBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShiftSlot) error {
	*o = ShiftSlot{}
	return nil
}

func shiftSlotAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShiftSlot) error {
	*o = ShiftSlot{}
	return nil
}

func shiftSlotBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShiftSlot) error {
	*o = ShiftSlot{}
	return nil
}

func shiftSlotAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShiftSlot) error {
	*o = ShiftSlot{}
	return nil
}

func testShiftSlotsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShiftSlot{}
	o := &ShiftSlot{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShiftSlot object: %s", err)
	}

	AddShiftSlotHook(boil.BeforeInsertHook, shiftSlotBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shiftSlotBeforeInsertHooks = []ShiftSlotHook{}

	AddShiftSlotHook(boil.AfterInsertHook, shiftSlotAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shiftSlotAfterInsertHooks = []ShiftSlotHook{}

	AddShiftSlotHook(boil.AfterSelectHook, shiftSlotAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shiftSlotAfterSelectHooks = []ShiftSlotHook{}

	AddShiftSlotHook(boil.BeforeUpdateHook, shiftSlotBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shiftSlotBeforeUpdateHooks = []ShiftSlotHook{}

	AddShiftSlotHook(boil.AfterUpdateHook, shiftSlotAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shiftSlotAfterUpdateHooks = []ShiftSlotHook{}

	AddShiftSlotHook(boil.BeforeDeleteHook, shiftSlotBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shiftSlotBeforeDeleteHooks = []ShiftSlotHook{}

	AddShiftSlotHook(boil.AfterDeleteHook, shiftSlotAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shiftSlotAfterDeleteHooks = []ShiftSlotHook{}

	AddShiftSlotHook(boil.BeforeUpsertHook, shiftSlotBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shiftSlotBeforeUpsertHooks = []ShiftSlotHook{}

	AddShiftSlotHook(boil.AfterUpsertHook, shiftSlotAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shiftSlotAfterUpsertHooks = []ShiftSlotHook{}
}

func testShiftSlotsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShiftSlots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShiftSlotsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shiftSlotColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShiftSlots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShiftSlotToManyShiftAssignments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShiftSlot
	var b, c ShiftAssignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShiftSlotID = a.ID
	c.ShiftSlotID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShiftAssignments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShiftSlotID == b.ShiftSlotID {
			bFound = true
		}
		if v.ShiftSlotID == c.ShiftSlotID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShiftSlotSlice{&a}
	if err = a.L.LoadShiftAssignments(ctx, tx, false, (*[]*ShiftSlot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShiftAssignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShiftAssignments = nil
	if err = a.L.LoadShiftAssignments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShiftAssignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShiftSlotToManyAddOpShiftAssignments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShiftSlot
	var b, c, d, e ShiftAssignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftSlotDBTypes, false, strmangle.SetComplement(shiftSlotPrimaryKeyColumns, shiftSlotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShiftAssignment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shiftAssignmentDBTypes, false, strmangle.SetComplement(shiftAssignmentPrimaryKeyColumns, shiftAssignmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShiftAssignment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShiftAssignments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShiftSlotID {
			t.Error("foreign key was wrong value", a.ID, first.ShiftSlotID)
		}
		if a.ID != second.ShiftSlotID {
			t.Error("foreign key was wrong value", a.ID, second.ShiftSlotID)
		}

		if first.R.ShiftSlot != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShiftSlot != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShiftAssignments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShiftAssignments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShiftAssignments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testShiftSlotToOneShiftUsingShift(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShiftSlot
	var foreign Shift

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shiftSlotDBTypes, false, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shiftDBTypes, false, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ShiftID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Shift().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShiftHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShiftSlotSlice{&local}
	if err = local.L.LoadShift(ctx, tx, false, (*[]*ShiftSlot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shift == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Shift = nil
	if err = local.L.LoadShift(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shift == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShiftSlotToOneSetOpShiftUsingShift(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShiftSlot
	var b, c Shift

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftSlotDBTypes, false, strmangle.SetComplement(shiftSlotPrimaryKeyColumns, shiftSlotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shiftDBTypes, false, strmangle.SetComplement(shiftPrimaryKeyColumns, shiftColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shiftDBTypes, false, strmangle.SetComplement(shiftPrimaryKeyColumns, shiftColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Shift{&b, &c} {
		err = a.SetShift(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Shift != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShiftSlots[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ShiftID != x.ID {
			t.Error("foreign key was wrong value", a.ShiftID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShiftID))
		reflect.Indirect(reflect.ValueOf(&a.ShiftID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ShiftID != x.ID {
			t.Error("foreign key was wrong value", a.ShiftID, x.ID)
		}
	}
}

func testShiftSlotsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShiftSlotsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShiftSlotSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShiftSlotsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShiftSlots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shiftSlotDBTypes = map[string]string{`ID`: `uuid`, `ShiftID`: `uuid`, `Name`: `text`, `Data`: `jsonb`}
	_                = bytes.MinRead
)

func testShiftSlotsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shiftSlotPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shiftSlotAllColumns) == len(shiftSlotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShiftSlots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShiftSlotsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shiftSlotAllColumns) == len(shiftSlotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShiftSlot{}
	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShiftSlots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shiftSlotDBTypes, true, shiftSlotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shiftSlotAllColumns, shiftSlotPrimaryKeyColumns) {
		fields = shiftSlotAllColumns
	} else {
		fields = strmangle.SetComplement(
			shiftSlotAllColumns,
			shiftSlotPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShiftSlotSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShiftSlotsUpsert(t *testing.T) {
	t.Parallel()

	if len(shiftSlotAllColumns) == len(shiftSlotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShiftSlot{}
	if err = randomize.Struct(seed, &o, shiftSlotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShiftSlot: %s", err)
	}

	count, err := ShiftSlots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shiftSlotDBTypes, false, shiftSlotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShiftSlot: %s", err)
	}

	count, err = ShiftSlots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
