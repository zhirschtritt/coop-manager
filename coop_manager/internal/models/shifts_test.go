// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShifts(t *testing.T) {
	t.Parallel()

	query := Shifts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShiftsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Shifts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShiftsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Shifts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Shifts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShiftsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShiftSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Shifts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShiftsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShiftExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Shift exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShiftExists to return true, but got false.")
	}
}

func testShiftsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shiftFound, err := FindShift(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shiftFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShiftsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Shifts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShiftsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Shifts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShiftsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shiftOne := &Shift{}
	shiftTwo := &Shift{}
	if err = randomize.Struct(seed, shiftOne, shiftDBTypes, false, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}
	if err = randomize.Struct(seed, shiftTwo, shiftDBTypes, false, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shiftOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shiftTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Shifts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShiftsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shiftOne := &Shift{}
	shiftTwo := &Shift{}
	if err = randomize.Struct(seed, shiftOne, shiftDBTypes, false, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}
	if err = randomize.Struct(seed, shiftTwo, shiftDBTypes, false, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shiftOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shiftTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shifts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shiftBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
	*o = Shift{}
	return nil
}

func shiftAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
	*o = Shift{}
	return nil
}

func shiftAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
	*o = Shift{}
	return nil
}

func shiftBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
	*o = Shift{}
	return nil
}

func shiftAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
	*o = Shift{}
	return nil
}

func shiftBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
	*o = Shift{}
	return nil
}

func shiftAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
	*o = Shift{}
	return nil
}

func shiftBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
	*o = Shift{}
	return nil
}

func shiftAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
	*o = Shift{}
	return nil
}

func testShiftsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Shift{}
	o := &Shift{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shiftDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Shift object: %s", err)
	}

	AddShiftHook(boil.BeforeInsertHook, shiftBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shiftBeforeInsertHooks = []ShiftHook{}

	AddShiftHook(boil.AfterInsertHook, shiftAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shiftAfterInsertHooks = []ShiftHook{}

	AddShiftHook(boil.AfterSelectHook, shiftAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shiftAfterSelectHooks = []ShiftHook{}

	AddShiftHook(boil.BeforeUpdateHook, shiftBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shiftBeforeUpdateHooks = []ShiftHook{}

	AddShiftHook(boil.AfterUpdateHook, shiftAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shiftAfterUpdateHooks = []ShiftHook{}

	AddShiftHook(boil.BeforeDeleteHook, shiftBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shiftBeforeDeleteHooks = []ShiftHook{}

	AddShiftHook(boil.AfterDeleteHook, shiftAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shiftAfterDeleteHooks = []ShiftHook{}

	AddShiftHook(boil.BeforeUpsertHook, shiftBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shiftBeforeUpsertHooks = []ShiftHook{}

	AddShiftHook(boil.AfterUpsertHook, shiftAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shiftAfterUpsertHooks = []ShiftHook{}
}

func testShiftsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shifts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShiftsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shiftColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Shifts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShiftToManyShiftAssignments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Shift
	var b, c ShiftAssignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShiftID = a.ID
	c.ShiftID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShiftAssignments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShiftID == b.ShiftID {
			bFound = true
		}
		if v.ShiftID == c.ShiftID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShiftSlice{&a}
	if err = a.L.LoadShiftAssignments(ctx, tx, false, (*[]*Shift)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShiftAssignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShiftAssignments = nil
	if err = a.L.LoadShiftAssignments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShiftAssignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShiftToManyShiftSlots(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Shift
	var b, c ShiftSlot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shiftSlotDBTypes, false, shiftSlotColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shiftSlotDBTypes, false, shiftSlotColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShiftID = a.ID
	c.ShiftID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShiftSlots().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShiftID == b.ShiftID {
			bFound = true
		}
		if v.ShiftID == c.ShiftID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShiftSlice{&a}
	if err = a.L.LoadShiftSlots(ctx, tx, false, (*[]*Shift)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShiftSlots); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShiftSlots = nil
	if err = a.L.LoadShiftSlots(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShiftSlots); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShiftToManyAddOpShiftAssignments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Shift
	var b, c, d, e ShiftAssignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftDBTypes, false, strmangle.SetComplement(shiftPrimaryKeyColumns, shiftColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShiftAssignment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shiftAssignmentDBTypes, false, strmangle.SetComplement(shiftAssignmentPrimaryKeyColumns, shiftAssignmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShiftAssignment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShiftAssignments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShiftID {
			t.Error("foreign key was wrong value", a.ID, first.ShiftID)
		}
		if a.ID != second.ShiftID {
			t.Error("foreign key was wrong value", a.ID, second.ShiftID)
		}

		if first.R.Shift != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Shift != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShiftAssignments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShiftAssignments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShiftAssignments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testShiftToManyAddOpShiftSlots(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Shift
	var b, c, d, e ShiftSlot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftDBTypes, false, strmangle.SetComplement(shiftPrimaryKeyColumns, shiftColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShiftSlot{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shiftSlotDBTypes, false, strmangle.SetComplement(shiftSlotPrimaryKeyColumns, shiftSlotColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShiftSlot{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShiftSlots(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShiftID {
			t.Error("foreign key was wrong value", a.ID, first.ShiftID)
		}
		if a.ID != second.ShiftID {
			t.Error("foreign key was wrong value", a.ID, second.ShiftID)
		}

		if first.R.Shift != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Shift != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShiftSlots[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShiftSlots[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShiftSlots().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testShiftToOneShiftTermUsingShiftTerm(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Shift
	var foreign ShiftTerm

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shiftTermDBTypes, false, shiftTermColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftTerm struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ShiftTermID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShiftTerm().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShiftTermHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ShiftTerm) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShiftSlice{&local}
	if err = local.L.LoadShiftTerm(ctx, tx, false, (*[]*Shift)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShiftTerm == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShiftTerm = nil
	if err = local.L.LoadShiftTerm(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShiftTerm == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShiftToOneSetOpShiftTermUsingShiftTerm(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Shift
	var b, c ShiftTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftDBTypes, false, strmangle.SetComplement(shiftPrimaryKeyColumns, shiftColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shiftTermDBTypes, false, strmangle.SetComplement(shiftTermPrimaryKeyColumns, shiftTermColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shiftTermDBTypes, false, strmangle.SetComplement(shiftTermPrimaryKeyColumns, shiftTermColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShiftTerm{&b, &c} {
		err = a.SetShiftTerm(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShiftTerm != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Shifts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ShiftTermID, x.ID) {
			t.Error("foreign key was wrong value", a.ShiftTermID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShiftTermID))
		reflect.Indirect(reflect.ValueOf(&a.ShiftTermID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ShiftTermID, x.ID) {
			t.Error("foreign key was wrong value", a.ShiftTermID, x.ID)
		}
	}
}

func testShiftToOneRemoveOpShiftTermUsingShiftTerm(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Shift
	var b ShiftTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftDBTypes, false, strmangle.SetComplement(shiftPrimaryKeyColumns, shiftColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shiftTermDBTypes, false, strmangle.SetComplement(shiftTermPrimaryKeyColumns, shiftTermColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetShiftTerm(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveShiftTerm(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ShiftTerm().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ShiftTerm != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ShiftTermID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Shifts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testShiftsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShiftsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShiftSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShiftsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Shifts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shiftDBTypes = map[string]string{`ID`: `uuid`, `StartAt`: `timestamp with time zone`, `EndAt`: `timestamp with time zone`, `ShiftTermID`: `uuid`}
	_            = bytes.MinRead
)

func testShiftsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shiftPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shiftAllColumns) == len(shiftPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shifts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShiftsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shiftAllColumns) == len(shiftPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Shift{}
	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shifts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shiftDBTypes, true, shiftPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shiftAllColumns, shiftPrimaryKeyColumns) {
		fields = shiftAllColumns
	} else {
		fields = strmangle.SetComplement(
			shiftAllColumns,
			shiftPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShiftSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShiftsUpsert(t *testing.T) {
	t.Parallel()

	if len(shiftAllColumns) == len(shiftPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Shift{}
	if err = randomize.Struct(seed, &o, shiftDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Shift: %s", err)
	}

	count, err := Shifts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shiftDBTypes, false, shiftPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Shift: %s", err)
	}

	count, err = Shifts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
