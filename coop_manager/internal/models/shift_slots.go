// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ShiftSlot is an object representing the database table.
type ShiftSlot struct {
	ID      string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ShiftID string     `boil:"shift_id" json:"shift_id" toml:"shift_id" yaml:"shift_id"`
	Name    string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Data    types.JSON `boil:"data" json:"data" toml:"data" yaml:"data"`

	R *shiftSlotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shiftSlotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShiftSlotColumns = struct {
	ID      string
	ShiftID string
	Name    string
	Data    string
}{
	ID:      "id",
	ShiftID: "shift_id",
	Name:    "name",
	Data:    "data",
}

var ShiftSlotTableColumns = struct {
	ID      string
	ShiftID string
	Name    string
	Data    string
}{
	ID:      "shift_slots.id",
	ShiftID: "shift_slots.shift_id",
	Name:    "shift_slots.name",
	Data:    "shift_slots.data",
}

// Generated where

var ShiftSlotWhere = struct {
	ID      whereHelperstring
	ShiftID whereHelperstring
	Name    whereHelperstring
	Data    whereHelpertypes_JSON
}{
	ID:      whereHelperstring{field: "\"shift_slots\".\"id\""},
	ShiftID: whereHelperstring{field: "\"shift_slots\".\"shift_id\""},
	Name:    whereHelperstring{field: "\"shift_slots\".\"name\""},
	Data:    whereHelpertypes_JSON{field: "\"shift_slots\".\"data\""},
}

// ShiftSlotRels is where relationship names are stored.
var ShiftSlotRels = struct {
	Shift            string
	ShiftAssignments string
}{
	Shift:            "Shift",
	ShiftAssignments: "ShiftAssignments",
}

// shiftSlotR is where relationships are stored.
type shiftSlotR struct {
	Shift            *Shift               `boil:"Shift" json:"Shift" toml:"Shift" yaml:"Shift"`
	ShiftAssignments ShiftAssignmentSlice `boil:"ShiftAssignments" json:"ShiftAssignments" toml:"ShiftAssignments" yaml:"ShiftAssignments"`
}

// NewStruct creates a new relationship struct
func (*shiftSlotR) NewStruct() *shiftSlotR {
	return &shiftSlotR{}
}

func (r *shiftSlotR) GetShift() *Shift {
	if r == nil {
		return nil
	}
	return r.Shift
}

func (r *shiftSlotR) GetShiftAssignments() ShiftAssignmentSlice {
	if r == nil {
		return nil
	}
	return r.ShiftAssignments
}

// shiftSlotL is where Load methods for each relationship are stored.
type shiftSlotL struct{}

var (
	shiftSlotAllColumns            = []string{"id", "shift_id", "name", "data"}
	shiftSlotColumnsWithoutDefault = []string{"shift_id", "name"}
	shiftSlotColumnsWithDefault    = []string{"id", "data"}
	shiftSlotPrimaryKeyColumns     = []string{"id"}
	shiftSlotGeneratedColumns      = []string{}
)

type (
	// ShiftSlotSlice is an alias for a slice of pointers to ShiftSlot.
	// This should almost always be used instead of []ShiftSlot.
	ShiftSlotSlice []*ShiftSlot
	// ShiftSlotHook is the signature for custom ShiftSlot hook methods
	ShiftSlotHook func(context.Context, boil.ContextExecutor, *ShiftSlot) error

	shiftSlotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shiftSlotType                 = reflect.TypeOf(&ShiftSlot{})
	shiftSlotMapping              = queries.MakeStructMapping(shiftSlotType)
	shiftSlotPrimaryKeyMapping, _ = queries.BindMapping(shiftSlotType, shiftSlotMapping, shiftSlotPrimaryKeyColumns)
	shiftSlotInsertCacheMut       sync.RWMutex
	shiftSlotInsertCache          = make(map[string]insertCache)
	shiftSlotUpdateCacheMut       sync.RWMutex
	shiftSlotUpdateCache          = make(map[string]updateCache)
	shiftSlotUpsertCacheMut       sync.RWMutex
	shiftSlotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shiftSlotAfterSelectHooks []ShiftSlotHook

var shiftSlotBeforeInsertHooks []ShiftSlotHook
var shiftSlotAfterInsertHooks []ShiftSlotHook

var shiftSlotBeforeUpdateHooks []ShiftSlotHook
var shiftSlotAfterUpdateHooks []ShiftSlotHook

var shiftSlotBeforeDeleteHooks []ShiftSlotHook
var shiftSlotAfterDeleteHooks []ShiftSlotHook

var shiftSlotBeforeUpsertHooks []ShiftSlotHook
var shiftSlotAfterUpsertHooks []ShiftSlotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShiftSlot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftSlotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShiftSlot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftSlotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShiftSlot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftSlotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShiftSlot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftSlotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShiftSlot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftSlotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShiftSlot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftSlotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShiftSlot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftSlotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShiftSlot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftSlotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShiftSlot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shiftSlotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShiftSlotHook registers your hook function for all future operations.
func AddShiftSlotHook(hookPoint boil.HookPoint, shiftSlotHook ShiftSlotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shiftSlotAfterSelectHooks = append(shiftSlotAfterSelectHooks, shiftSlotHook)
	case boil.BeforeInsertHook:
		shiftSlotBeforeInsertHooks = append(shiftSlotBeforeInsertHooks, shiftSlotHook)
	case boil.AfterInsertHook:
		shiftSlotAfterInsertHooks = append(shiftSlotAfterInsertHooks, shiftSlotHook)
	case boil.BeforeUpdateHook:
		shiftSlotBeforeUpdateHooks = append(shiftSlotBeforeUpdateHooks, shiftSlotHook)
	case boil.AfterUpdateHook:
		shiftSlotAfterUpdateHooks = append(shiftSlotAfterUpdateHooks, shiftSlotHook)
	case boil.BeforeDeleteHook:
		shiftSlotBeforeDeleteHooks = append(shiftSlotBeforeDeleteHooks, shiftSlotHook)
	case boil.AfterDeleteHook:
		shiftSlotAfterDeleteHooks = append(shiftSlotAfterDeleteHooks, shiftSlotHook)
	case boil.BeforeUpsertHook:
		shiftSlotBeforeUpsertHooks = append(shiftSlotBeforeUpsertHooks, shiftSlotHook)
	case boil.AfterUpsertHook:
		shiftSlotAfterUpsertHooks = append(shiftSlotAfterUpsertHooks, shiftSlotHook)
	}
}

// OneG returns a single shiftSlot record from the query using the global executor.
func (q shiftSlotQuery) OneG(ctx context.Context) (*ShiftSlot, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single shiftSlot record from the query.
func (q shiftSlotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShiftSlot, error) {
	o := &ShiftSlot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shift_slots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ShiftSlot records from the query using the global executor.
func (q shiftSlotQuery) AllG(ctx context.Context) (ShiftSlotSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ShiftSlot records from the query.
func (q shiftSlotQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShiftSlotSlice, error) {
	var o []*ShiftSlot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShiftSlot slice")
	}

	if len(shiftSlotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ShiftSlot records in the query using the global executor
func (q shiftSlotQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ShiftSlot records in the query.
func (q shiftSlotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shift_slots rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q shiftSlotQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q shiftSlotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shift_slots exists")
	}

	return count > 0, nil
}

// Shift pointed to by the foreign key.
func (o *ShiftSlot) Shift(mods ...qm.QueryMod) shiftQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShiftID),
	}

	queryMods = append(queryMods, mods...)

	return Shifts(queryMods...)
}

// ShiftAssignments retrieves all the shift_assignment's ShiftAssignments with an executor.
func (o *ShiftSlot) ShiftAssignments(mods ...qm.QueryMod) shiftAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shift_assignments\".\"shift_slot_id\"=?", o.ID),
	)

	return ShiftAssignments(queryMods...)
}

// LoadShift allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shiftSlotL) LoadShift(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftSlot interface{}, mods queries.Applicator) error {
	var slice []*ShiftSlot
	var object *ShiftSlot

	if singular {
		var ok bool
		object, ok = maybeShiftSlot.(*ShiftSlot)
		if !ok {
			object = new(ShiftSlot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftSlot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftSlot))
			}
		}
	} else {
		s, ok := maybeShiftSlot.(*[]*ShiftSlot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftSlot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftSlot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftSlotR{}
		}
		args = append(args, object.ShiftID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftSlotR{}
			}

			for _, a := range args {
				if a == obj.ShiftID {
					continue Outer
				}
			}

			args = append(args, obj.ShiftID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shifts`),
		qm.WhereIn(`shifts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Shift")
	}

	var resultSlice []*Shift
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Shift")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shifts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shifts")
	}

	if len(shiftAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Shift = foreign
		if foreign.R == nil {
			foreign.R = &shiftR{}
		}
		foreign.R.ShiftSlots = append(foreign.R.ShiftSlots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShiftID == foreign.ID {
				local.R.Shift = foreign
				if foreign.R == nil {
					foreign.R = &shiftR{}
				}
				foreign.R.ShiftSlots = append(foreign.R.ShiftSlots, local)
				break
			}
		}
	}

	return nil
}

// LoadShiftAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shiftSlotL) LoadShiftAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShiftSlot interface{}, mods queries.Applicator) error {
	var slice []*ShiftSlot
	var object *ShiftSlot

	if singular {
		var ok bool
		object, ok = maybeShiftSlot.(*ShiftSlot)
		if !ok {
			object = new(ShiftSlot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShiftSlot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShiftSlot))
			}
		}
	} else {
		s, ok := maybeShiftSlot.(*[]*ShiftSlot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShiftSlot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShiftSlot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shiftSlotR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shiftSlotR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shift_assignments`),
		qm.WhereIn(`shift_assignments.shift_slot_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shift_assignments")
	}

	var resultSlice []*ShiftAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shift_assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shift_assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shift_assignments")
	}

	if len(shiftAssignmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShiftAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shiftAssignmentR{}
			}
			foreign.R.ShiftSlot = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShiftSlotID {
				local.R.ShiftAssignments = append(local.R.ShiftAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &shiftAssignmentR{}
				}
				foreign.R.ShiftSlot = local
				break
			}
		}
	}

	return nil
}

// SetShiftG of the shiftSlot to the related item.
// Sets o.R.Shift to related.
// Adds o to related.R.ShiftSlots.
// Uses the global database handle.
func (o *ShiftSlot) SetShiftG(ctx context.Context, insert bool, related *Shift) error {
	return o.SetShift(ctx, boil.GetContextDB(), insert, related)
}

// SetShift of the shiftSlot to the related item.
// Sets o.R.Shift to related.
// Adds o to related.R.ShiftSlots.
func (o *ShiftSlot) SetShift(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Shift) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shift_slots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shift_id"}),
		strmangle.WhereClause("\"", "\"", 2, shiftSlotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShiftID = related.ID
	if o.R == nil {
		o.R = &shiftSlotR{
			Shift: related,
		}
	} else {
		o.R.Shift = related
	}

	if related.R == nil {
		related.R = &shiftR{
			ShiftSlots: ShiftSlotSlice{o},
		}
	} else {
		related.R.ShiftSlots = append(related.R.ShiftSlots, o)
	}

	return nil
}

// AddShiftAssignmentsG adds the given related objects to the existing relationships
// of the shift_slot, optionally inserting them as new records.
// Appends related to o.R.ShiftAssignments.
// Sets related.R.ShiftSlot appropriately.
// Uses the global database handle.
func (o *ShiftSlot) AddShiftAssignmentsG(ctx context.Context, insert bool, related ...*ShiftAssignment) error {
	return o.AddShiftAssignments(ctx, boil.GetContextDB(), insert, related...)
}

// AddShiftAssignments adds the given related objects to the existing relationships
// of the shift_slot, optionally inserting them as new records.
// Appends related to o.R.ShiftAssignments.
// Sets related.R.ShiftSlot appropriately.
func (o *ShiftSlot) AddShiftAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShiftAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShiftSlotID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shift_assignments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shift_slot_id"}),
				strmangle.WhereClause("\"", "\"", 2, shiftAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShiftSlotID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shiftSlotR{
			ShiftAssignments: related,
		}
	} else {
		o.R.ShiftAssignments = append(o.R.ShiftAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shiftAssignmentR{
				ShiftSlot: o,
			}
		} else {
			rel.R.ShiftSlot = o
		}
	}
	return nil
}

// ShiftSlots retrieves all the records using an executor.
func ShiftSlots(mods ...qm.QueryMod) shiftSlotQuery {
	mods = append(mods, qm.From("\"shift_slots\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shift_slots\".*"})
	}

	return shiftSlotQuery{q}
}

// FindShiftSlotG retrieves a single record by ID.
func FindShiftSlotG(ctx context.Context, iD string, selectCols ...string) (*ShiftSlot, error) {
	return FindShiftSlot(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindShiftSlot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShiftSlot(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ShiftSlot, error) {
	shiftSlotObj := &ShiftSlot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shift_slots\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shiftSlotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shift_slots")
	}

	if err = shiftSlotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shiftSlotObj, err
	}

	return shiftSlotObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ShiftSlot) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShiftSlot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shift_slots provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftSlotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shiftSlotInsertCacheMut.RLock()
	cache, cached := shiftSlotInsertCache[key]
	shiftSlotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shiftSlotAllColumns,
			shiftSlotColumnsWithDefault,
			shiftSlotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shiftSlotType, shiftSlotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shiftSlotType, shiftSlotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shift_slots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shift_slots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shift_slots")
	}

	if !cached {
		shiftSlotInsertCacheMut.Lock()
		shiftSlotInsertCache[key] = cache
		shiftSlotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ShiftSlot record using the global executor.
// See Update for more documentation.
func (o *ShiftSlot) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ShiftSlot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShiftSlot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shiftSlotUpdateCacheMut.RLock()
	cache, cached := shiftSlotUpdateCache[key]
	shiftSlotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shiftSlotAllColumns,
			shiftSlotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shift_slots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shift_slots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shiftSlotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shiftSlotType, shiftSlotMapping, append(wl, shiftSlotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shift_slots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shift_slots")
	}

	if !cached {
		shiftSlotUpdateCacheMut.Lock()
		shiftSlotUpdateCache[key] = cache
		shiftSlotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q shiftSlotQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q shiftSlotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shift_slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shift_slots")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ShiftSlotSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShiftSlotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftSlotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shift_slots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shiftSlotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shiftSlot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shiftSlot")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ShiftSlot) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShiftSlot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shift_slots provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shiftSlotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shiftSlotUpsertCacheMut.RLock()
	cache, cached := shiftSlotUpsertCache[key]
	shiftSlotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shiftSlotAllColumns,
			shiftSlotColumnsWithDefault,
			shiftSlotColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shiftSlotAllColumns,
			shiftSlotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shift_slots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shiftSlotPrimaryKeyColumns))
			copy(conflict, shiftSlotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shift_slots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shiftSlotType, shiftSlotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shiftSlotType, shiftSlotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shift_slots")
	}

	if !cached {
		shiftSlotUpsertCacheMut.Lock()
		shiftSlotUpsertCache[key] = cache
		shiftSlotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ShiftSlot record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ShiftSlot) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ShiftSlot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShiftSlot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShiftSlot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shiftSlotPrimaryKeyMapping)
	sql := "DELETE FROM \"shift_slots\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shift_slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shift_slots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q shiftSlotQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q shiftSlotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shiftSlotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shift_slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shift_slots")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ShiftSlotSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShiftSlotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shiftSlotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftSlotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shift_slots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftSlotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shiftSlot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shift_slots")
	}

	if len(shiftSlotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ShiftSlot) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ShiftSlot provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShiftSlot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShiftSlot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShiftSlotSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ShiftSlotSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShiftSlotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShiftSlotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shiftSlotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shift_slots\".* FROM \"shift_slots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shiftSlotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShiftSlotSlice")
	}

	*o = slice

	return nil
}

// ShiftSlotExistsG checks if the ShiftSlot row exists.
func ShiftSlotExistsG(ctx context.Context, iD string) (bool, error) {
	return ShiftSlotExists(ctx, boil.GetContextDB(), iD)
}

// ShiftSlotExists checks if the ShiftSlot row exists.
func ShiftSlotExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shift_slots\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shift_slots exists")
	}

	return exists, nil
}

// Exists checks if the ShiftSlot row exists.
func (o *ShiftSlot) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShiftSlotExists(ctx, exec, o.ID)
}
