// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file coop_manager/v1/coop_manager.proto (package coop_manager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum coop_manager.v1.ActorType
 */
export enum ActorType {
  /**
   * @generated from enum value: ACTOR_TYPE_USER = 0;
   */
  USER = 0,

  /**
   * @generated from enum value: ACTOR_TYPE_DEVICE = 1;
   */
  DEVICE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ActorType)
proto3.util.setEnumType(ActorType, "coop_manager.v1.ActorType", [
  { no: 0, name: "ACTOR_TYPE_USER" },
  { no: 1, name: "ACTOR_TYPE_DEVICE" },
]);

/**
 * @generated from message coop_manager.v1.Actor
 */
export class Actor extends Message<Actor> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<Actor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coop_manager.v1.Actor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Actor {
    return new Actor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Actor {
    return new Actor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Actor {
    return new Actor().fromJsonString(jsonString, options);
  }

  static equals(a: Actor | PlainMessage<Actor> | undefined, b: Actor | PlainMessage<Actor> | undefined): boolean {
    return proto3.util.equals(Actor, a, b);
  }
}

/**
 * @generated from message coop_manager.v1.ShiftSlot
 */
export class ShiftSlot extends Message<ShiftSlot> {
  /**
   * @generated from oneof coop_manager.v1.ShiftSlot.identifier
   */
  identifier: {
    /**
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | {
    /**
     * @generated from field: string name = 2;
     */
    value: string;
    case: "name";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ShiftSlot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coop_manager.v1.ShiftSlot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShiftSlot {
    return new ShiftSlot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShiftSlot {
    return new ShiftSlot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShiftSlot {
    return new ShiftSlot().fromJsonString(jsonString, options);
  }

  static equals(a: ShiftSlot | PlainMessage<ShiftSlot> | undefined, b: ShiftSlot | PlainMessage<ShiftSlot> | undefined): boolean {
    return proto3.util.equals(ShiftSlot, a, b);
  }
}

/**
 * @generated from message coop_manager.v1.AssignShiftRequest
 */
export class AssignShiftRequest extends Message<AssignShiftRequest> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: string shift_id = 2;
   */
  shiftId = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: coop_manager.v1.Actor actor = 4;
   */
  actor?: Actor;

  /**
   * @generated from field: coop_manager.v1.ShiftSlot slot = 5;
   */
  slot?: ShiftSlot;

  constructor(data?: PartialMessage<AssignShiftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coop_manager.v1.AssignShiftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "shift_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "actor", kind: "message", T: Actor },
    { no: 5, name: "slot", kind: "message", T: ShiftSlot },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignShiftRequest {
    return new AssignShiftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignShiftRequest {
    return new AssignShiftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignShiftRequest {
    return new AssignShiftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AssignShiftRequest | PlainMessage<AssignShiftRequest> | undefined, b: AssignShiftRequest | PlainMessage<AssignShiftRequest> | undefined): boolean {
    return proto3.util.equals(AssignShiftRequest, a, b);
  }
}

/**
 * @generated from message coop_manager.v1.AssignShiftResponse
 */
export class AssignShiftResponse extends Message<AssignShiftResponse> {
  /**
   * @generated from field: string shift_assignment_id = 2;
   */
  shiftAssignmentId = "";

  constructor(data?: PartialMessage<AssignShiftResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coop_manager.v1.AssignShiftResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "shift_assignment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignShiftResponse {
    return new AssignShiftResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignShiftResponse {
    return new AssignShiftResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignShiftResponse {
    return new AssignShiftResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AssignShiftResponse | PlainMessage<AssignShiftResponse> | undefined, b: AssignShiftResponse | PlainMessage<AssignShiftResponse> | undefined): boolean {
    return proto3.util.equals(AssignShiftResponse, a, b);
  }
}

/**
 * @generated from message coop_manager.v1.UnassignShiftRequest
 */
export class UnassignShiftRequest extends Message<UnassignShiftRequest> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: string shift_assignment_id = 2;
   */
  shiftAssignmentId = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: coop_manager.v1.Actor actor = 4;
   */
  actor?: Actor;

  constructor(data?: PartialMessage<UnassignShiftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coop_manager.v1.UnassignShiftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "shift_assignment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "actor", kind: "message", T: Actor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnassignShiftRequest {
    return new UnassignShiftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnassignShiftRequest {
    return new UnassignShiftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnassignShiftRequest {
    return new UnassignShiftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnassignShiftRequest | PlainMessage<UnassignShiftRequest> | undefined, b: UnassignShiftRequest | PlainMessage<UnassignShiftRequest> | undefined): boolean {
    return proto3.util.equals(UnassignShiftRequest, a, b);
  }
}

/**
 * @generated from message coop_manager.v1.UnassignShiftResponse
 */
export class UnassignShiftResponse extends Message<UnassignShiftResponse> {
  constructor(data?: PartialMessage<UnassignShiftResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coop_manager.v1.UnassignShiftResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnassignShiftResponse {
    return new UnassignShiftResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnassignShiftResponse {
    return new UnassignShiftResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnassignShiftResponse {
    return new UnassignShiftResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnassignShiftResponse | PlainMessage<UnassignShiftResponse> | undefined, b: UnassignShiftResponse | PlainMessage<UnassignShiftResponse> | undefined): boolean {
    return proto3.util.equals(UnassignShiftResponse, a, b);
  }
}

/**
 * @generated from message coop_manager.v1.ShiftDetails
 */
export class ShiftDetails extends Message<ShiftDetails> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp starts_at = 2;
   */
  startsAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ends_at = 3;
   */
  endsAt?: Timestamp;

  constructor(data?: PartialMessage<ShiftDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coop_manager.v1.ShiftDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "starts_at", kind: "message", T: Timestamp },
    { no: 3, name: "ends_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShiftDetails {
    return new ShiftDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShiftDetails {
    return new ShiftDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShiftDetails {
    return new ShiftDetails().fromJsonString(jsonString, options);
  }

  static equals(a: ShiftDetails | PlainMessage<ShiftDetails> | undefined, b: ShiftDetails | PlainMessage<ShiftDetails> | undefined): boolean {
    return proto3.util.equals(ShiftDetails, a, b);
  }
}

/**
 * @generated from message coop_manager.v1.ListShiftsRequest
 */
export class ListShiftsRequest extends Message<ListShiftsRequest> {
  /**
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string next_page_cursor = 3;
   */
  nextPageCursor = "";

  constructor(data?: PartialMessage<ListShiftsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coop_manager.v1.ListShiftsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "next_page_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListShiftsRequest {
    return new ListShiftsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListShiftsRequest {
    return new ListShiftsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListShiftsRequest {
    return new ListShiftsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListShiftsRequest | PlainMessage<ListShiftsRequest> | undefined, b: ListShiftsRequest | PlainMessage<ListShiftsRequest> | undefined): boolean {
    return proto3.util.equals(ListShiftsRequest, a, b);
  }
}

/**
 * @generated from message coop_manager.v1.ListShiftsResponse
 */
export class ListShiftsResponse extends Message<ListShiftsResponse> {
  /**
   * @generated from field: repeated coop_manager.v1.ShiftDetails shifts = 1;
   */
  shifts: ShiftDetails[] = [];

  /**
   * @generated from field: string next_page_cursor = 2;
   */
  nextPageCursor = "";

  constructor(data?: PartialMessage<ListShiftsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coop_manager.v1.ListShiftsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shifts", kind: "message", T: ShiftDetails, repeated: true },
    { no: 2, name: "next_page_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListShiftsResponse {
    return new ListShiftsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListShiftsResponse {
    return new ListShiftsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListShiftsResponse {
    return new ListShiftsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListShiftsResponse | PlainMessage<ListShiftsResponse> | undefined, b: ListShiftsResponse | PlainMessage<ListShiftsResponse> | undefined): boolean {
    return proto3.util.equals(ListShiftsResponse, a, b);
  }
}

