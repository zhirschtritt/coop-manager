// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShiftAssignments(t *testing.T) {
	t.Parallel()

	query := ShiftAssignments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShiftAssignmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShiftAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShiftAssignmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShiftAssignments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShiftAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShiftAssignmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShiftAssignmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShiftAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShiftAssignmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShiftAssignmentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShiftAssignment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShiftAssignmentExists to return true, but got false.")
	}
}

func testShiftAssignmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shiftAssignmentFound, err := FindShiftAssignment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shiftAssignmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShiftAssignmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShiftAssignments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShiftAssignmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShiftAssignments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShiftAssignmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shiftAssignmentOne := &ShiftAssignment{}
	shiftAssignmentTwo := &ShiftAssignment{}
	if err = randomize.Struct(seed, shiftAssignmentOne, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}
	if err = randomize.Struct(seed, shiftAssignmentTwo, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shiftAssignmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shiftAssignmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShiftAssignments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShiftAssignmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shiftAssignmentOne := &ShiftAssignment{}
	shiftAssignmentTwo := &ShiftAssignment{}
	if err = randomize.Struct(seed, shiftAssignmentOne, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}
	if err = randomize.Struct(seed, shiftAssignmentTwo, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shiftAssignmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shiftAssignmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShiftAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shiftAssignmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShiftAssignment) error {
	*o = ShiftAssignment{}
	return nil
}

func shiftAssignmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShiftAssignment) error {
	*o = ShiftAssignment{}
	return nil
}

func shiftAssignmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShiftAssignment) error {
	*o = ShiftAssignment{}
	return nil
}

func shiftAssignmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShiftAssignment) error {
	*o = ShiftAssignment{}
	return nil
}

func shiftAssignmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShiftAssignment) error {
	*o = ShiftAssignment{}
	return nil
}

func shiftAssignmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShiftAssignment) error {
	*o = ShiftAssignment{}
	return nil
}

func shiftAssignmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShiftAssignment) error {
	*o = ShiftAssignment{}
	return nil
}

func shiftAssignmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShiftAssignment) error {
	*o = ShiftAssignment{}
	return nil
}

func shiftAssignmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShiftAssignment) error {
	*o = ShiftAssignment{}
	return nil
}

func testShiftAssignmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShiftAssignment{}
	o := &ShiftAssignment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment object: %s", err)
	}

	AddShiftAssignmentHook(boil.BeforeInsertHook, shiftAssignmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shiftAssignmentBeforeInsertHooks = []ShiftAssignmentHook{}

	AddShiftAssignmentHook(boil.AfterInsertHook, shiftAssignmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shiftAssignmentAfterInsertHooks = []ShiftAssignmentHook{}

	AddShiftAssignmentHook(boil.AfterSelectHook, shiftAssignmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shiftAssignmentAfterSelectHooks = []ShiftAssignmentHook{}

	AddShiftAssignmentHook(boil.BeforeUpdateHook, shiftAssignmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shiftAssignmentBeforeUpdateHooks = []ShiftAssignmentHook{}

	AddShiftAssignmentHook(boil.AfterUpdateHook, shiftAssignmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shiftAssignmentAfterUpdateHooks = []ShiftAssignmentHook{}

	AddShiftAssignmentHook(boil.BeforeDeleteHook, shiftAssignmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shiftAssignmentBeforeDeleteHooks = []ShiftAssignmentHook{}

	AddShiftAssignmentHook(boil.AfterDeleteHook, shiftAssignmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shiftAssignmentAfterDeleteHooks = []ShiftAssignmentHook{}

	AddShiftAssignmentHook(boil.BeforeUpsertHook, shiftAssignmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shiftAssignmentBeforeUpsertHooks = []ShiftAssignmentHook{}

	AddShiftAssignmentHook(boil.AfterUpsertHook, shiftAssignmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shiftAssignmentAfterUpsertHooks = []ShiftAssignmentHook{}
}

func testShiftAssignmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShiftAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShiftAssignmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shiftAssignmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShiftAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShiftAssignmentToOneCoopEventUsingCreatedByCoopEvent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShiftAssignment
	var foreign CoopEvent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, coopEventDBTypes, false, coopEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CoopEvent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CreatedBy = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CreatedByCoopEvent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCoopEventHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CoopEvent) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShiftAssignmentSlice{&local}
	if err = local.L.LoadCreatedByCoopEvent(ctx, tx, false, (*[]*ShiftAssignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedByCoopEvent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CreatedByCoopEvent = nil
	if err = local.L.LoadCreatedByCoopEvent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedByCoopEvent == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShiftAssignmentToOneMemberUsingMember(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShiftAssignment
	var foreign Member

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, memberDBTypes, false, memberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Member struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MemberID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Member().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddMemberHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Member) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShiftAssignmentSlice{&local}
	if err = local.L.LoadMember(ctx, tx, false, (*[]*ShiftAssignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Member == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Member = nil
	if err = local.L.LoadMember(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Member == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShiftAssignmentToOneShiftUsingShift(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShiftAssignment
	var foreign Shift

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shiftDBTypes, false, shiftColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shift struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ShiftID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Shift().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShiftHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Shift) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShiftAssignmentSlice{&local}
	if err = local.L.LoadShift(ctx, tx, false, (*[]*ShiftAssignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shift == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Shift = nil
	if err = local.L.LoadShift(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shift == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShiftAssignmentToOneShiftSlotUsingShiftSlot(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShiftAssignment
	var foreign ShiftSlot

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shiftAssignmentDBTypes, false, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shiftSlotDBTypes, false, shiftSlotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftSlot struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ShiftSlotID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShiftSlot().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShiftSlotHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ShiftSlot) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShiftAssignmentSlice{&local}
	if err = local.L.LoadShiftSlot(ctx, tx, false, (*[]*ShiftAssignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShiftSlot == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShiftSlot = nil
	if err = local.L.LoadShiftSlot(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShiftSlot == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShiftAssignmentToOneSetOpCoopEventUsingCreatedByCoopEvent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShiftAssignment
	var b, c CoopEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftAssignmentDBTypes, false, strmangle.SetComplement(shiftAssignmentPrimaryKeyColumns, shiftAssignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, coopEventDBTypes, false, strmangle.SetComplement(coopEventPrimaryKeyColumns, coopEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, coopEventDBTypes, false, strmangle.SetComplement(coopEventPrimaryKeyColumns, coopEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CoopEvent{&b, &c} {
		err = a.SetCreatedByCoopEvent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CreatedByCoopEvent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatedByShiftAssignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CreatedBy != x.ID {
			t.Error("foreign key was wrong value", a.CreatedBy)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatedBy))
		reflect.Indirect(reflect.ValueOf(&a.CreatedBy)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CreatedBy != x.ID {
			t.Error("foreign key was wrong value", a.CreatedBy, x.ID)
		}
	}
}
func testShiftAssignmentToOneSetOpMemberUsingMember(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShiftAssignment
	var b, c Member

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftAssignmentDBTypes, false, strmangle.SetComplement(shiftAssignmentPrimaryKeyColumns, shiftAssignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memberDBTypes, false, strmangle.SetComplement(memberPrimaryKeyColumns, memberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Member{&b, &c} {
		err = a.SetMember(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Member != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShiftAssignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MemberID != x.ID {
			t.Error("foreign key was wrong value", a.MemberID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MemberID))
		reflect.Indirect(reflect.ValueOf(&a.MemberID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MemberID != x.ID {
			t.Error("foreign key was wrong value", a.MemberID, x.ID)
		}
	}
}
func testShiftAssignmentToOneSetOpShiftUsingShift(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShiftAssignment
	var b, c Shift

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftAssignmentDBTypes, false, strmangle.SetComplement(shiftAssignmentPrimaryKeyColumns, shiftAssignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shiftDBTypes, false, strmangle.SetComplement(shiftPrimaryKeyColumns, shiftColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shiftDBTypes, false, strmangle.SetComplement(shiftPrimaryKeyColumns, shiftColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Shift{&b, &c} {
		err = a.SetShift(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Shift != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShiftAssignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ShiftID != x.ID {
			t.Error("foreign key was wrong value", a.ShiftID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShiftID))
		reflect.Indirect(reflect.ValueOf(&a.ShiftID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ShiftID != x.ID {
			t.Error("foreign key was wrong value", a.ShiftID, x.ID)
		}
	}
}
func testShiftAssignmentToOneSetOpShiftSlotUsingShiftSlot(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShiftAssignment
	var b, c ShiftSlot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shiftAssignmentDBTypes, false, strmangle.SetComplement(shiftAssignmentPrimaryKeyColumns, shiftAssignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shiftSlotDBTypes, false, strmangle.SetComplement(shiftSlotPrimaryKeyColumns, shiftSlotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shiftSlotDBTypes, false, strmangle.SetComplement(shiftSlotPrimaryKeyColumns, shiftSlotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShiftSlot{&b, &c} {
		err = a.SetShiftSlot(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShiftSlot != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShiftAssignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ShiftSlotID != x.ID {
			t.Error("foreign key was wrong value", a.ShiftSlotID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShiftSlotID))
		reflect.Indirect(reflect.ValueOf(&a.ShiftSlotID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ShiftSlotID != x.ID {
			t.Error("foreign key was wrong value", a.ShiftSlotID, x.ID)
		}
	}
}

func testShiftAssignmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShiftAssignmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShiftAssignmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShiftAssignmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShiftAssignments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shiftAssignmentDBTypes = map[string]string{`ID`: `uuid`, `MemberID`: `uuid`, `ShiftID`: `uuid`, `CreatedBy`: `uuid`, `ShiftSlotID`: `uuid`}
	_                      = bytes.MinRead
)

func testShiftAssignmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shiftAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shiftAssignmentAllColumns) == len(shiftAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShiftAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShiftAssignmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shiftAssignmentAllColumns) == len(shiftAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShiftAssignment{}
	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShiftAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shiftAssignmentDBTypes, true, shiftAssignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shiftAssignmentAllColumns, shiftAssignmentPrimaryKeyColumns) {
		fields = shiftAssignmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			shiftAssignmentAllColumns,
			shiftAssignmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShiftAssignmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShiftAssignmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(shiftAssignmentAllColumns) == len(shiftAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShiftAssignment{}
	if err = randomize.Struct(seed, &o, shiftAssignmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShiftAssignment: %s", err)
	}

	count, err := ShiftAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shiftAssignmentDBTypes, false, shiftAssignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShiftAssignment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShiftAssignment: %s", err)
	}

	count, err = ShiftAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
