// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("CoopEvents", testCoopEvents)
	t.Run("Members", testMembers)
	t.Run("MembershipTypes", testMembershipTypes)
	t.Run("Memberships", testMemberships)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("ShiftAssignments", testShiftAssignments)
	t.Run("ShiftSlots", testShiftSlots)
	t.Run("ShiftTerms", testShiftTerms)
	t.Run("Shifts", testShifts)
	t.Run("Test1s", testTest1s)
}

func TestDelete(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsDelete)
	t.Run("Members", testMembersDelete)
	t.Run("MembershipTypes", testMembershipTypesDelete)
	t.Run("Memberships", testMembershipsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("ShiftAssignments", testShiftAssignmentsDelete)
	t.Run("ShiftSlots", testShiftSlotsDelete)
	t.Run("ShiftTerms", testShiftTermsDelete)
	t.Run("Shifts", testShiftsDelete)
	t.Run("Test1s", testTest1sDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsQueryDeleteAll)
	t.Run("Members", testMembersQueryDeleteAll)
	t.Run("MembershipTypes", testMembershipTypesQueryDeleteAll)
	t.Run("Memberships", testMembershipsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("ShiftAssignments", testShiftAssignmentsQueryDeleteAll)
	t.Run("ShiftSlots", testShiftSlotsQueryDeleteAll)
	t.Run("ShiftTerms", testShiftTermsQueryDeleteAll)
	t.Run("Shifts", testShiftsQueryDeleteAll)
	t.Run("Test1s", testTest1sQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsSliceDeleteAll)
	t.Run("Members", testMembersSliceDeleteAll)
	t.Run("MembershipTypes", testMembershipTypesSliceDeleteAll)
	t.Run("Memberships", testMembershipsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("ShiftAssignments", testShiftAssignmentsSliceDeleteAll)
	t.Run("ShiftSlots", testShiftSlotsSliceDeleteAll)
	t.Run("ShiftTerms", testShiftTermsSliceDeleteAll)
	t.Run("Shifts", testShiftsSliceDeleteAll)
	t.Run("Test1s", testTest1sSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsExists)
	t.Run("Members", testMembersExists)
	t.Run("MembershipTypes", testMembershipTypesExists)
	t.Run("Memberships", testMembershipsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("ShiftAssignments", testShiftAssignmentsExists)
	t.Run("ShiftSlots", testShiftSlotsExists)
	t.Run("ShiftTerms", testShiftTermsExists)
	t.Run("Shifts", testShiftsExists)
	t.Run("Test1s", testTest1sExists)
}

func TestFind(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsFind)
	t.Run("Members", testMembersFind)
	t.Run("MembershipTypes", testMembershipTypesFind)
	t.Run("Memberships", testMembershipsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("ShiftAssignments", testShiftAssignmentsFind)
	t.Run("ShiftSlots", testShiftSlotsFind)
	t.Run("ShiftTerms", testShiftTermsFind)
	t.Run("Shifts", testShiftsFind)
	t.Run("Test1s", testTest1sFind)
}

func TestBind(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsBind)
	t.Run("Members", testMembersBind)
	t.Run("MembershipTypes", testMembershipTypesBind)
	t.Run("Memberships", testMembershipsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("ShiftAssignments", testShiftAssignmentsBind)
	t.Run("ShiftSlots", testShiftSlotsBind)
	t.Run("ShiftTerms", testShiftTermsBind)
	t.Run("Shifts", testShiftsBind)
	t.Run("Test1s", testTest1sBind)
}

func TestOne(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsOne)
	t.Run("Members", testMembersOne)
	t.Run("MembershipTypes", testMembershipTypesOne)
	t.Run("Memberships", testMembershipsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("ShiftAssignments", testShiftAssignmentsOne)
	t.Run("ShiftSlots", testShiftSlotsOne)
	t.Run("ShiftTerms", testShiftTermsOne)
	t.Run("Shifts", testShiftsOne)
	t.Run("Test1s", testTest1sOne)
}

func TestAll(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsAll)
	t.Run("Members", testMembersAll)
	t.Run("MembershipTypes", testMembershipTypesAll)
	t.Run("Memberships", testMembershipsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("ShiftAssignments", testShiftAssignmentsAll)
	t.Run("ShiftSlots", testShiftSlotsAll)
	t.Run("ShiftTerms", testShiftTermsAll)
	t.Run("Shifts", testShiftsAll)
	t.Run("Test1s", testTest1sAll)
}

func TestCount(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsCount)
	t.Run("Members", testMembersCount)
	t.Run("MembershipTypes", testMembershipTypesCount)
	t.Run("Memberships", testMembershipsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("ShiftAssignments", testShiftAssignmentsCount)
	t.Run("ShiftSlots", testShiftSlotsCount)
	t.Run("ShiftTerms", testShiftTermsCount)
	t.Run("Shifts", testShiftsCount)
	t.Run("Test1s", testTest1sCount)
}

func TestHooks(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsHooks)
	t.Run("Members", testMembersHooks)
	t.Run("MembershipTypes", testMembershipTypesHooks)
	t.Run("Memberships", testMembershipsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("ShiftAssignments", testShiftAssignmentsHooks)
	t.Run("ShiftSlots", testShiftSlotsHooks)
	t.Run("ShiftTerms", testShiftTermsHooks)
	t.Run("Shifts", testShiftsHooks)
	t.Run("Test1s", testTest1sHooks)
}

func TestInsert(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsInsert)
	t.Run("CoopEvents", testCoopEventsInsertWhitelist)
	t.Run("Members", testMembersInsert)
	t.Run("Members", testMembersInsertWhitelist)
	t.Run("MembershipTypes", testMembershipTypesInsert)
	t.Run("MembershipTypes", testMembershipTypesInsertWhitelist)
	t.Run("Memberships", testMembershipsInsert)
	t.Run("Memberships", testMembershipsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("ShiftAssignments", testShiftAssignmentsInsert)
	t.Run("ShiftAssignments", testShiftAssignmentsInsertWhitelist)
	t.Run("ShiftSlots", testShiftSlotsInsert)
	t.Run("ShiftSlots", testShiftSlotsInsertWhitelist)
	t.Run("ShiftTerms", testShiftTermsInsert)
	t.Run("ShiftTerms", testShiftTermsInsertWhitelist)
	t.Run("Shifts", testShiftsInsert)
	t.Run("Shifts", testShiftsInsertWhitelist)
	t.Run("Test1s", testTest1sInsert)
	t.Run("Test1s", testTest1sInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("MembershipToMemberUsingMember", testMembershipToOneMemberUsingMember)
	t.Run("MembershipToMembershipTypeUsingMembershipType", testMembershipToOneMembershipTypeUsingMembershipType)
	t.Run("ShiftAssignmentToCoopEventUsingCreatedByCoopEvent", testShiftAssignmentToOneCoopEventUsingCreatedByCoopEvent)
	t.Run("ShiftAssignmentToMemberUsingMember", testShiftAssignmentToOneMemberUsingMember)
	t.Run("ShiftAssignmentToShiftUsingShift", testShiftAssignmentToOneShiftUsingShift)
	t.Run("ShiftAssignmentToShiftSlotUsingShiftSlot", testShiftAssignmentToOneShiftSlotUsingShiftSlot)
	t.Run("ShiftSlotToShiftUsingShift", testShiftSlotToOneShiftUsingShift)
	t.Run("ShiftToShiftTermUsingShiftTerm", testShiftToOneShiftTermUsingShiftTerm)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CoopEventToCreatedByShiftAssignments", testCoopEventToManyCreatedByShiftAssignments)
	t.Run("MemberToMemberships", testMemberToManyMemberships)
	t.Run("MemberToShiftAssignments", testMemberToManyShiftAssignments)
	t.Run("MembershipTypeToMemberships", testMembershipTypeToManyMemberships)
	t.Run("ShiftSlotToShiftAssignments", testShiftSlotToManyShiftAssignments)
	t.Run("ShiftTermToShifts", testShiftTermToManyShifts)
	t.Run("ShiftToShiftAssignments", testShiftToManyShiftAssignments)
	t.Run("ShiftToShiftSlots", testShiftToManyShiftSlots)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("MembershipToMemberUsingMemberships", testMembershipToOneSetOpMemberUsingMember)
	t.Run("MembershipToMembershipTypeUsingMemberships", testMembershipToOneSetOpMembershipTypeUsingMembershipType)
	t.Run("ShiftAssignmentToCoopEventUsingCreatedByShiftAssignments", testShiftAssignmentToOneSetOpCoopEventUsingCreatedByCoopEvent)
	t.Run("ShiftAssignmentToMemberUsingShiftAssignments", testShiftAssignmentToOneSetOpMemberUsingMember)
	t.Run("ShiftAssignmentToShiftUsingShiftAssignments", testShiftAssignmentToOneSetOpShiftUsingShift)
	t.Run("ShiftAssignmentToShiftSlotUsingShiftAssignments", testShiftAssignmentToOneSetOpShiftSlotUsingShiftSlot)
	t.Run("ShiftSlotToShiftUsingShiftSlots", testShiftSlotToOneSetOpShiftUsingShift)
	t.Run("ShiftToShiftTermUsingShifts", testShiftToOneSetOpShiftTermUsingShiftTerm)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ShiftToShiftTermUsingShifts", testShiftToOneRemoveOpShiftTermUsingShiftTerm)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CoopEventToCreatedByShiftAssignments", testCoopEventToManyAddOpCreatedByShiftAssignments)
	t.Run("MemberToMemberships", testMemberToManyAddOpMemberships)
	t.Run("MemberToShiftAssignments", testMemberToManyAddOpShiftAssignments)
	t.Run("MembershipTypeToMemberships", testMembershipTypeToManyAddOpMemberships)
	t.Run("ShiftSlotToShiftAssignments", testShiftSlotToManyAddOpShiftAssignments)
	t.Run("ShiftTermToShifts", testShiftTermToManyAddOpShifts)
	t.Run("ShiftToShiftAssignments", testShiftToManyAddOpShiftAssignments)
	t.Run("ShiftToShiftSlots", testShiftToManyAddOpShiftSlots)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ShiftTermToShifts", testShiftTermToManySetOpShifts)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ShiftTermToShifts", testShiftTermToManyRemoveOpShifts)
}

func TestReload(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsReload)
	t.Run("Members", testMembersReload)
	t.Run("MembershipTypes", testMembershipTypesReload)
	t.Run("Memberships", testMembershipsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("ShiftAssignments", testShiftAssignmentsReload)
	t.Run("ShiftSlots", testShiftSlotsReload)
	t.Run("ShiftTerms", testShiftTermsReload)
	t.Run("Shifts", testShiftsReload)
	t.Run("Test1s", testTest1sReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsReloadAll)
	t.Run("Members", testMembersReloadAll)
	t.Run("MembershipTypes", testMembershipTypesReloadAll)
	t.Run("Memberships", testMembershipsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("ShiftAssignments", testShiftAssignmentsReloadAll)
	t.Run("ShiftSlots", testShiftSlotsReloadAll)
	t.Run("ShiftTerms", testShiftTermsReloadAll)
	t.Run("Shifts", testShiftsReloadAll)
	t.Run("Test1s", testTest1sReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsSelect)
	t.Run("Members", testMembersSelect)
	t.Run("MembershipTypes", testMembershipTypesSelect)
	t.Run("Memberships", testMembershipsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("ShiftAssignments", testShiftAssignmentsSelect)
	t.Run("ShiftSlots", testShiftSlotsSelect)
	t.Run("ShiftTerms", testShiftTermsSelect)
	t.Run("Shifts", testShiftsSelect)
	t.Run("Test1s", testTest1sSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsUpdate)
	t.Run("Members", testMembersUpdate)
	t.Run("MembershipTypes", testMembershipTypesUpdate)
	t.Run("Memberships", testMembershipsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("ShiftAssignments", testShiftAssignmentsUpdate)
	t.Run("ShiftSlots", testShiftSlotsUpdate)
	t.Run("ShiftTerms", testShiftTermsUpdate)
	t.Run("Shifts", testShiftsUpdate)
	t.Run("Test1s", testTest1sUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("CoopEvents", testCoopEventsSliceUpdateAll)
	t.Run("Members", testMembersSliceUpdateAll)
	t.Run("MembershipTypes", testMembershipTypesSliceUpdateAll)
	t.Run("Memberships", testMembershipsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("ShiftAssignments", testShiftAssignmentsSliceUpdateAll)
	t.Run("ShiftSlots", testShiftSlotsSliceUpdateAll)
	t.Run("ShiftTerms", testShiftTermsSliceUpdateAll)
	t.Run("Shifts", testShiftsSliceUpdateAll)
	t.Run("Test1s", testTest1sSliceUpdateAll)
}
